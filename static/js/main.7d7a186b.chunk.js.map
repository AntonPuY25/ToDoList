{"version":3,"sources":["ToDoList/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","error","setError","title","setTitle","addTask","taskTitle","trim","id","onClick","removeTodoList","className","value","onChange","event","currentTarget","onKeyPress","key","tasks","map","i","e","changeStatus","checked","type","isDone","delete","filter","changeFilter","todolistID1","v1","todolistID2","App","todolists","setTodolists","setTasks","toDoListId","newTask","deleteTask","toDoListTask","filterValue","toDoListID","todolist","find","tl","taskId","toDiListId","task","t","newToDoList","resultTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7d7a186b.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {FilterTypes} from \"../App\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<PropsTypeTask>\r\n    addTask: (title: string, toDoListId: string) => void\r\n    delete: (id: string, toDoListId: string) => void\r\n    changeFilter: (str: FilterTypes, toDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, toDiListId: string) => void\r\n    filter: FilterTypes\r\n    id: string\r\n    removeTodoList: (toDoListID: string) => void\r\n}\r\nexport type PropsTypeTask = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const addTask = () => {\r\n        const taskTitle = title.trim()\r\n        if (taskTitle) {\r\n            props.addTask(taskTitle, props.id)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n\r\n\r\n    }\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addTask()\r\n    }\r\n    const onAllKeyHandler = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveKeyHandler = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedKeyHandler = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    return (<div>\r\n        <div>\r\n            <h3>{props.title}\r\n                <span><button onClick={() => props.removeTodoList(props.id)}>Ð¥</button></span>\r\n            </h3>\r\n\r\n\r\n            <div>\r\n                <input className={error ? 'error' : \"\"}\r\n                       value={title}\r\n                       onChange={onChangeHandlerInput}\r\n                       onKeyPress={onKeyHandlerInput}\r\n\r\n                />\r\n\r\n\r\n                <button onClick={addTask}>+\r\n                </button>\r\n                {error ? <div className={'error-message'}>{error}</div> : null}\r\n            </div>\r\n\r\n            {props.tasks.map((i: PropsTypeTask) => {\r\n                const removeTask = () => {\r\n                    props.delete(i.id, props.id)\r\n                }\r\n                const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus(i.id, e.currentTarget.checked, props.id)\r\n                }\r\n                return (<ul key={i.id}>\r\n                        <li><input\r\n                            onChange={changeStatus}\r\n                            type=\"checkbox\" checked={i.isDone}/>\r\n                            <span className={(i.isDone === true) ? 'is-done' : \"\"}>{i.title}</span></li>\r\n                        <li>\r\n                            <button onClick={removeTask}>X\r\n                            </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                )\r\n            })}\r\n\r\n\r\n            <div>\r\n                <button className={(props.filter === 'all' ? 'btn' : \"\")} onClick={onAllKeyHandler}>All\r\n                </button>\r\n                <button className={(props.filter === 'active' ? 'btn' : \"\")}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </button>\r\n                <button className={(props.filter === 'completed' ? 'btn' : \"\")}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList/ToDoList\";\r\nimport {PropsTypeTask} from './ToDoList/ToDoList';\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type FilterTypes = \"all\" | \"active\" | \"completed\";\r\n\r\ntype ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterTypes\r\n\r\n}\r\nconst todolistID1 = v1();\r\nconst todolistID2 = v1();\r\n\r\nfunction App() {\r\n    const [todolists, setTodolists] = useState<Array<ToDoListsType>>([\r\n            {id: todolistID1, title: 'What to Learn', filter: 'all'},\r\n            {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n        ]\r\n    )\r\n    type TypeTaskState = {\r\n        [key: string]: Array<PropsTypeTask>\r\n    }\r\n    let [tasks, setTasks] = useState<TypeTaskState>({\r\n            [todolistID1]: [\r\n                {id: v1(), title: 'Html', isDone: true},\r\n                {id: v1(), title: 'Css', isDone: false},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'React', isDone: false},\r\n                {id: v1(), title: 'Angular', isDone: false},\r\n                {id: v1(), title: 'Vue', isDone: false}],\r\n            [todolistID2]: [\r\n                {id: v1(), title: 'Milk', isDone: true},\r\n                {id: v1(), title: 'Bread', isDone: false},\r\n                {id: v1(), title: 'Butter', isDone: true},\r\n\r\n            ]\r\n\r\n        }\r\n    )\r\n\r\n    function addTask(title: string, toDoListId: string) {\r\n\r\n        const newTask: PropsTypeTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    let deleteTask = (id: string, toDoListId: string) => {\r\n        let toDoListTask = tasks[toDoListId]\r\n        tasks[toDoListId] = toDoListTask.filter((tasks: PropsTypeTask) => {\r\n            return tasks.id !== id\r\n        })\r\n        // setTasks({...tasks,[toDoListId]:tasks[toDoListId].filter(tasks=> tasks.id !== id)})\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function changeFilter(filterValue: FilterTypes, toDoListID: string) {\r\n        const todolist = todolists.find(tl => tl.id === toDoListID)\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(toDoListID: string) {\r\n        setTodolists(todolists.filter(tl => tl.id !== toDoListID))\r\n        delete tasks[toDoListID]\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, toDiListId: string) {\r\n        let todolistTasks = tasks[toDiListId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            task.isDone = isDone\r\n        }\r\n        setTasks({...tasks})\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            {todolists.map((newToDoList: ToDoListsType) => {\r\n\r\n                let resultTask = tasks[newToDoList.id];\r\n\r\n                if (newToDoList.filter === \"active\") {\r\n                    resultTask = tasks[newToDoList.id].filter(t => t.isDone === false)\r\n                }\r\n                if (newToDoList.filter === \"completed\") {\r\n                    resultTask = tasks[newToDoList.id].filter(t => t.isDone === true)\r\n                }\r\n                return <ToDoList key={newToDoList.id} id={newToDoList.id}\r\n                                 title={newToDoList.title} tasks={resultTask}\r\n                                 addTask={addTask} delete={deleteTask} changeStatus={changeStatus}\r\n                                 changeFilter={changeFilter} filter={newToDoList.filter}\r\n                                 removeTodoList={removeTodoList}\r\n                />\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}