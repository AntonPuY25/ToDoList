{"version":3,"sources":["ToDoList/todolist.module.css","AddItemForm.tsx","editSpan.tsx","ToDoList/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","e","autoFocus","onBlur","changeTaskTitle","onDoubleClick","isDone","ToDoList","style","textAlign","changeTodolistTitle","id","s","delete","IconButton","removeTodoList","addTask","tasks","map","i","Checkbox","changeStatus","checked","filter","changeFilter","todolistID1","v1","todolistID2","App","todolists","setTodolists","setTasks","toDoListId","newTask","deleteTask","toDoListTask","filterValue","toDoListID","todolist","find","tl","taskId","toDiListId","task","t","todo","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","todolistTitle","todolistId","newToDolist","newToDoList","resultTask","padding","item","xs","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9d53325f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\"};","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: TypeAddItemProps) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\ntype TypeEditSpan={\r\n    title:string\r\n    isDone?:boolean\r\n    changeTaskTitle: ( title: string) => void\r\n\r\n}\r\n\r\nfunction EditSpan(props:TypeEditSpan){\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n        editMode?<TextField value={text}  size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span onDoubleClick={onEditMode} className={(props.isDone) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n}\r\nexport default EditSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {FilterTypes} from \"../App\";\r\nimport AddItemForm from \"../AddItemForm\";\r\nimport EditSpan from \"../editSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport s from './todolist.module.css'\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<PropsTypeTask>\r\n    addTask: (title: string, toDoListId: string) => void\r\n    delete: (id: string, toDoListId: string) => void\r\n    changeFilter: (str: FilterTypes, toDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, toDiListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDiListId: string) => void\r\n    filter: FilterTypes\r\n    id: string\r\n    removeTodoList: (toDoListID: string) => void\r\n    changeTodolistTitle: (title: string, toDiListId: string) => void\r\n\r\n}\r\nexport type PropsTypeTask = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    // let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n    // const [title, setTitle] = useState<string>(\"\")\r\n    // const addTask = () => {\r\n    //     const taskTitle = title.trim()\r\n    //     if (taskTitle) {\r\n    //         props.addTask(taskTitle, props.id)\r\n    //         setTitle('')\r\n    //     } else {\r\n    //         setError('Title is Required')\r\n    //     }\r\n    // }\r\n    // const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(event.currentTarget.value)\r\n    //     setError(null)\r\n    // }\r\n    // const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (event.key === 'Enter') addTask()\r\n    // }\r\n    const onAllKeyHandler = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveKeyHandler = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedKeyHandler = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodotitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    return (<div>\r\n        <div>\r\n            <h3 style={{textAlign:'center'}}><EditSpan title={props.title}\r\n                          changeTaskTitle={changeTodotitle}/>\r\n                <div className={s.delete}><IconButton\r\n                    onClick={() => props.removeTodoList(props.id)}><DeleteForeverIcon/></IconButton></div>\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask}/>\r\n\r\n            {/*<div>*/}\r\n            {/*    <input className={error ? 'error' : \"\"}*/}\r\n            {/*           value={title}*/}\r\n            {/*           onChange={onChangeHandlerInput}*/}\r\n            {/*           onKeyPress={onKeyHandlerInput}*/}\r\n\r\n            {/*    />*/}\r\n\r\n\r\n            {/*    <button onClick={addTask}>+*/}\r\n            {/*    </button>*/}\r\n            {/*    {error ? <div className={'error-message'}>{error}</div> : null}*/}\r\n            {/*</div>*/}\r\n\r\n            {props.tasks.map((i: PropsTypeTask) => {\r\n                const removeTask = () => {\r\n                    props.delete(i.id, props.id)\r\n                }\r\n                const changeTaskNew = (title: string) => {\r\n                    props.changeTaskTitle(i.id, title, props.id)\r\n                }\r\n                const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus(i.id, e.currentTarget.checked, props.id)\r\n                }\r\n                return (<div key={i.id}>\r\n                        <div><Checkbox color={\"primary\"}\r\n                            onChange={changeStatus}\r\n                            checked={i.isDone}/>\r\n                            <EditSpan title={i.title} isDone={i.isDone}\r\n                                      changeTaskTitle={changeTaskNew}/>\r\n                            {/*<span className={(i.isDone === true) ? 'is-done' : \"\"}>{i.title}</span>*/}\r\n                            <span><IconButton onClick={removeTask}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                )\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={props.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={props.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={props.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList/ToDoList\";\r\nimport {PropsTypeTask} from './ToDoList/ToDoList';\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type FilterTypes = \"all\" | \"active\" | \"completed\";\r\n\r\ntype ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterTypes\r\n\r\n}\r\nconst todolistID1 = v1();\r\nconst todolistID2 = v1();\r\n\r\nfunction App() {\r\n    const [todolists, setTodolists] = useState<Array<ToDoListsType>>([\r\n            {id: todolistID1, title: 'What to Learn', filter: 'all'},\r\n            {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n        ]\r\n    )\r\n    type TypeTaskState = {\r\n        [key: string]: Array<PropsTypeTask>\r\n    }\r\n    type TypeTaskStateTest = {\r\n        [key: string]: []\r\n    }\r\n    let [tasks, setTasks] = useState<TypeTaskState>({\r\n            [todolistID1]: [\r\n                {id: v1(), title: 'Html', isDone: true},\r\n                {id: v1(), title: 'Css', isDone: false},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'React', isDone: false}\r\n                ],\r\n            [todolistID2]: [\r\n                {id: v1(), title: 'Milk', isDone: true},\r\n                {id: v1(), title: 'Bread', isDone: false},\r\n                {id: v1(), title: 'Butter', isDone: true},\r\n\r\n            ]\r\n\r\n        }\r\n    )\r\n\r\n    function addTask(title: string, toDoListId: string) {\r\n\r\n        const newTask: PropsTypeTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    let deleteTask = (id: string, toDoListId: string) => {\r\n        let toDoListTask = tasks[toDoListId]\r\n        tasks[toDoListId] = toDoListTask.filter((tasks: PropsTypeTask) => {\r\n            return tasks.id !== id\r\n        })\r\n        // setTasks({...tasks,[toDoListId]:tasks[toDoListId].filter(tasks=> tasks.id !== id)})\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function changeFilter(filterValue: FilterTypes, toDoListID: string) {\r\n        const todolist = todolists.find(tl => tl.id === toDoListID)\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(toDoListID: string) {\r\n        setTodolists(todolists.filter(tl => tl.id !== toDoListID))\r\n        delete tasks[toDoListID]\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, toDiListId: string) {\r\n        let todolistTasks = tasks[toDiListId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            task.isDone = isDone\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addToDoList(todolistTitle: string) {\r\n        const todolistId = v1();\r\n        const newToDolist: ToDoListsType = {\r\n            id: todolistId,\r\n            title: todolistTitle,\r\n            filter: 'all'\r\n        }\r\n// const newTask:TypeTaskState = ({\r\n//     [todolistId]: []\r\n// })\r\n        setTasks({...tasks, [todolistId]: []})\r\n        setTodolists([...todolists, newToDolist])\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, toDiListId: string) {\r\n\r\n        let todolistTasks = tasks[toDiListId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = title\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, toDiListId: string) {\r\n        let todo = (todolists.find(tl => tl.id === toDiListId))\r\n        if (todo) {\r\n            todo.title = title\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>{todolists.map((newToDoList: ToDoListsType) => {\r\n\r\n                    let resultTask = tasks[newToDoList.id];\r\n\r\n                    if (newToDoList.filter === \"active\") {\r\n                        resultTask = tasks[newToDoList.id].filter(t => t.isDone === false)\r\n                    }\r\n                    if (newToDoList.filter === \"completed\") {\r\n                        resultTask = tasks[newToDoList.id].filter(t => t.isDone === true)\r\n                    }\r\n                    return <Grid style={{padding:'10px'}} key={newToDoList.id} item xs={3}>\r\n                        <Paper elevation={5} style={{padding:'10px'}}>\r\n                            <ToDoList id={newToDoList.id}\r\n                                      title={newToDoList.title} tasks={resultTask}\r\n                                      addTask={addTask} delete={deleteTask} changeStatus={changeStatus}\r\n                                      changeFilter={changeFilter} filter={newToDoList.filter}\r\n                                      removeTodoList={removeTodoList} changeTaskTitle={changeTaskTitle}\r\n                                      changeTodolistTitle={changeTodolistTitle}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })}</Grid>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}