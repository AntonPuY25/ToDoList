{"version":3,"sources":["serviceWorker.ts","dall/todolists-api.tsx","state/taskReducer.ts","state/todolistReducer.ts","state/store.ts","AddItemForm.tsx","editSpan.tsx","Tasks/tasks.tsx","ToDoList/ToDoList.tsx","AppWithRedux.tsx","index.tsx","ToDoList/todolist.module.css"],"names":["Boolean","window","location","hostname","match","PriorityType","TypeStatusTask","instance","axios","create","baseURL","withCredentials","headers","GetApi","getTodoLists","get","then","response","data","setTodolist","title","post","removeTodolist","todolistId","delete","updateTodolist","put","reorderTodolist","putAfterItemId","getTasks","createTask","deleteTask","taskId","updateTask","model","reorderTask","addTaskAC","task","type","changeTaskAC","getTasksAC","todoListId","tasks","initilalState","RemoveTodolistAC","id","ChangeToddolistAC","changeTodolistFilterAC","filter","initialState","rootReducer","combineReducers","state","action","copyState","result","map","ts","todolist","todolists","forEach","td","tl","newTodolist","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","e","autoFocus","onBlur","changeTaskTitle","onDoubleClick","status","Completed","Task","dispatch","useDispatch","removeTask","useCallback","res","removeTaskAC","changeTaskNew","getState","a","find","description","completed","priority","startDate","deadline","item","updateTaskTC","changeStatus","checked","Checkbox","IconButton","ToDoList","useSelector","useEffect","items","resultTask","t","New","onAllKeyHandler","onActiveKeyHandler","onCompletedKeyHandler","addTask","addTaskTC","changeTodotitle","updateTodolistTC","s","test","style","textAlign","i","AppWithRedux","v1","addToDoList","todolistTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","newToDoList","padding","xs","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.2ebbeeca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c9a11d0b-1bf4-4a0d-8b85-3f35229d5cc6'\r\n    }\r\n})\r\n\r\nexport enum PriorityType {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum TypeStatusTask {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport type TypeTodolist = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TypeData = {\r\n    item: TypeTodolist\r\n}\r\nexport type TypeResponseDeleteAndUpdate<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TypeTaskItems = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TypeResponseTask = {\r\n    items: Array<TypeTaskItems>\r\n    totalCount: number\r\n    error: boolean\r\n}\r\nexport type PropertiesType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nconst GetApi = {\r\n    getTodoLists: () => {\r\n        return instance.get<Array<TypeTodolist>>('todo-lists').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    setTodolist: (title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<TypeData>>(`todo-lists`, {title})\r\n    },\r\n    removeTodolist: (todolistId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist: (todolistId: string, title: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    reorderTodolist: (todolistId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/reorder`, {putAfterItemId})\r\n    },\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<TypeResponseTask>(`todo-lists/${todolistId}/tasks?count=10&page=1`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/tasks/${taskId}`,)\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: PropertiesType) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`/todo-lists/${todolistId}/tasks/${taskId}`,\r\n\r\n            model\r\n        )\r\n    },\r\n    reorderTask: (todolistId: string, taskId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<TypeData>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {\r\n            putAfterItemId,\r\n        })\r\n    }\r\n}\r\nexport default GetApi;","import {TypeAddTodolistAction, TypeRemoveTodolistAction, TypeSetTodolistAction} from \"./todolistReducer\";\r\nimport GetApi, {PropertiesType, TypeStatusTask, TypeTaskItems, TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): TypeAction1 => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId}\r\n}\r\nexport const addTaskAC = (task: TypeTaskItems): TypetAction2 => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskAC = (task: TypeTaskItems): TypetAction3 => {\r\n    return {type: 'CHANGE_TASK', task}\r\n}\r\n\r\nexport const AddTodilistAC = (todolist: TypeTodolist): TypeAddTodolistAction => {\r\n    return {type: 'ADD-TODOLIST', todolist,}\r\n}\r\nexport const RemoveTodolistAC = (todoListId: string): TypeRemoveTodolistAction => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const getTasksAC = (todoListId: string, tasks: Array<TypeTaskItems>) => {\r\n    return {type: 'GET-TASKS', todoListId, tasks} as const\r\n}\r\ntype TypeActionGetTasks = ReturnType<typeof getTasksAC>\r\ntype TypeAction1 = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\nexport type TypetAction2 = {\r\n    type: 'ADD-TASK'\r\n    task: TypeTaskItems\r\n}\r\ntype TypetAction3 = {\r\n    type: 'CHANGE_TASK'\r\n    task: TypeTaskItems\r\n}\r\n\r\nexport type TypeTaskReducer = {\r\n    [key: string]: TypeTaskItems[]\r\n}\r\nlet initilalState: TypeTaskReducer = {}\r\n\r\nexport type ActionType =\r\n    TypeAction1\r\n    | TypetAction2\r\n    | TypetAction3\r\n    | TypeAddTodolistAction\r\n    | TypeRemoveTodolistAction\r\n    | TypeSetTodolistAction\r\n    | TypeActionGetTasks\r\n\r\nexport function taskReducer(state: TypeTaskReducer = initilalState, action: ActionType): TypeTaskReducer {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter((task: TypeTaskItems) => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        }\r\n\r\n        case \"CHANGE_TASK\": {\r\n            const copyState = {...state}\r\n            let result = copyState[action.task.todoListId].map(ts => {\r\n                if (ts.id === action.task.id) {\r\n                    ts = action.task\r\n                    return ts\r\n                }\r\n                return ts\r\n            })\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: result\r\n            }\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n\r\n        case \"todolist_reducer/SET_TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(td => {\r\n                copyState[td.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"GET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(task => task)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTaskTC = (todoListId: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    async (dispatch) => {\r\n        let result = await GetApi.getTasks(todoListId)\r\n        dispatch(getTasksAC(todoListId, result.data.items))\r\n    }\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    async (dispatch) => {\r\n        let task = await GetApi.createTask(todoListId, title)\r\n        dispatch(addTaskAC(task.data.data.item))\r\n\r\n    }\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    (dispatch) => {\r\n\r\n        GetApi.deleteTask(todoListId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(taskId, todoListId))\r\n\r\n            })\r\n    }\r\n\r\nexport const updateTaskTC = (todoListId: string, taskId: string, title: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n\r\n            }\r\n            let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n            dispatch(changeTaskAC(result.data.data.item))\r\n        }\r\n\r\n    }\r\nexport const updateTask1TC = (todoListId: string, taskId: string, status: TypeStatusTask): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n            }\r\n            let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n            dispatch(changeTaskAC(result.data.data.item))\r\n        }\r\n\r\n    }","import {TypeFilter} from \"../AppWithRedux\";\r\nimport GetApi, {TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): TypeRemoveTodolistAction => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodilistAC = (todolist:TypeTodolist): TypeAddTodolistAction => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\n\r\n\r\nexport const ChangeToddolistAC = (id: string, title: string): TypeChangeTodoolistAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_TITLE\",\r\n        id,\r\n        title\r\n    }\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: TypeFilter): TypeChangeTodoolistFilterAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_FILTER\",\r\n        id,\r\n        filter\r\n    }\r\n}\r\nexport const setTodolist = (todolists:Array<TypeTodolist>)=>{\r\n    return{\r\n        type:'todolist_reducer/SET_TODOLISTS',\r\n        todolists\r\n    } as const\r\n}\r\nexport type TypeSetTodolistAction = ReturnType<typeof setTodolist>\r\nexport type TypeRemoveTodolistAction = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type TypeAddTodolistAction = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist:TypeTodolist\r\n}\r\ntype TypeChangeTodoolistAction = {\r\n    type: \"CHANGE_TODOLIST_TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\ntype TypeChangeTodoolistFilterAction = {\r\n    type: \"CHANGE_TODOLIST_FILTER\"\r\n    id: string\r\n    filter: TypeFilter\r\n}\r\nexport type TypeTodolistReducer = TypeTodolist&{filter:TypeFilter}\r\nlet initialState: Array<TypeTodolistReducer> = []\r\nexport type ActionType =\r\n    TypeRemoveTodolistAction\r\n    | TypeAddTodolistAction\r\n    | TypeChangeTodoolistAction\r\n    | TypeChangeTodoolistFilterAction\r\n    | TypeSetTodolistAction;\r\n\r\nexport function TodolistReducer(state: Array<TypeTodolistReducer> = initialState, action: ActionType): Array<TypeTodolistReducer> {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n\r\n            const newTodolist:any  = action.todolist\r\n            newTodolist.filter = 'all'\r\n            return [\r\n                newTodolist, ...state\r\n            ]\r\n        case \"CHANGE_TODOLIST_TITLE\":\r\n            return state.map((tl) => {\r\n                if (tl.id === action.id) {\r\n\r\n                    return {...tl, title: action.title}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"CHANGE_TODOLIST_FILTER\":\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n\r\n                    return {...tl, filter: action.filter}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"todolist_reducer/SET_TODOLISTS\":{\r\n            return action.todolists.map(td=> {\r\n               return{\r\n                   ...td,\r\n                   filter:\"all\"\r\n               }\r\n            })\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const getTodolistsTC = ():ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n        let result = await  GetApi.getTodoLists()\r\n        dispatch(setTodolist(result))\r\n}\r\nexport const addTodolistTC = (title: string):ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n        let result= await  GetApi.setTodolist(title)\r\n        dispatch(AddTodilistAC(result.data.data.item))\r\n    }\r\nexport const removeTodolistTC = (todolistId: string):ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n        await  GetApi.removeTodolist(todolistId)\r\n        dispatch(RemoveTodolistAC(todolistId))\r\n    }\r\nexport const updateTodolistTC = (todolistId: string,title:string):ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n       await  GetApi.updateTodolist(todolistId,title)\r\n        dispatch(ChangeToddolistAC(todolistId,title))\r\n    }","import {taskReducer} from './taskReducer';\r\nimport {TodolistReducer} from './todolistReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: TodolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo((props: TypeAddItemProps) =>{\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        if(error){\r\n            setError(null)\r\n\r\n        }\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TypeStatusTask} from \"./dall/todolists-api\";\r\n\r\nexport type TypeEditSpan={\r\n    title:string\r\n    changeTaskTitle: ( title: string) => void\r\n    status?:TypeStatusTask\r\n\r\n\r\n}\r\n\r\nconst EditSpan = React.memo((props:TypeEditSpan)=>{\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{\r\n        setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n\r\n        editMode?<TextField value={text}  size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span onDoubleClick={onEditMode} className={(props.status===TypeStatusTask.Completed) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n})\r\nexport default EditSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport { removeTaskTC, updateTask1TC, updateTaskTC} from \"../state/taskReducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditSpan from \"../editSpan\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TypeTaskItems} from \"../dall/todolists-api\";\r\n\r\nexport type TypePropsTask = {\r\n    task:TypeTaskItems\r\n    todolistId: string\r\n\r\n}\r\nconst Task =  React.memo((props:TypePropsTask)=>{\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback( () => {\r\n\r\n        dispatch(removeTaskTC(props.todolistId,props.task.id))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeTaskNew = useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todolistId,props.task.id, title))\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        dispatch(updateTask1TC(props.todolistId,props.task.id,\r\n\r\n            e.currentTarget.checked?2:0, ))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    return <>\r\n\r\n\r\n            <div><Checkbox color={\"primary\"}\r\n                           onChange={changeStatus}\r\n                           checked={props.task.status===0?false:true}/>\r\n                <EditSpan\r\n                    title={props.task.title}\r\n                    changeTaskTitle={changeTaskNew}\r\n                    status={props.task.status}\r\n                />\r\n\r\n                <span><IconButton onClick={removeTask}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n            </div>\r\n\r\n\r\n\r\n\r\n    </>\r\n\r\n})\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../AddItemForm\";\r\nimport EditSpan from \"../editSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport s from './todolist.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeTodolistFilterAC, removeTodolistTC, updateTodolistTC} from \"../state/todolistReducer\";\r\nimport {addTaskTC, getTaskTC, TypeTaskReducer} from \"../state/taskReducer\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport Task from \"../Tasks/tasks\";\r\nimport {TypeStatusTask, TypeTaskItems} from \"../dall/todolists-api\";\r\nimport {TypeFilter} from \"../AppWithRedux\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    filter:TypeFilter\r\n}\r\n\r\n\r\n\r\nexport const ToDoList = React.memo( (props: PropsType) => {\r\n    const tasks = useSelector<AppRootStateType, TypeTaskReducer>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(props.id))\r\n    },[dispatch,props.id])\r\n    let resultTask = tasks[props.id];\r\n\r\n    if (props.filter === \"active\") {\r\n\r\n        resultTask = tasks[props.id].filter((t:TypeTaskItems) => t.status === TypeStatusTask.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        resultTask = tasks[props.id].filter(t => t.status === TypeStatusTask.Completed)\r\n    }\r\n\r\n    const onAllKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'all'))\r\n    },[dispatch,props.id])\r\n    const onActiveKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'active'))\r\n\r\n    },[dispatch,props.id])\r\n    const onCompletedKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'completed'))\r\n\r\n    },[dispatch,props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(props.id,title))\r\n    },[dispatch,props.id])\r\n    const changeTodotitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTC(props.id, title))\r\n    },[dispatch,props.id])\r\n    return (<div>\r\n        <div>\r\n            <div className={s.delete}><IconButton\r\n                onClick={() => dispatch(removeTodolistTC(props.id))}><DeleteForeverIcon/></IconButton></div>\r\n\r\n            <h3 className={s.test} style={{textAlign: 'center'}}>\r\n                <EditSpan\r\n                    title={props.title}\r\n                    changeTaskTitle={changeTodotitle}/>\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask}/>\r\n\r\n            {resultTask.map((i: TypeTaskItems) => {\r\n              return  <Task todolistId={props.id} task={i}\r\n                             key={i.id}  />\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={props.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={props.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={props.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList/ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {addTodolistTC, getTodolistsTC, TypeTodolistReducer} from \"./state/todolistReducer\";\r\n\r\nexport type TypeFilter = 'all'|'active'|'completed';\r\n\r\nexport const todolistID1 = v1();\r\nexport const todolistID2 = v1();\r\n\r\n const AppWithRedux  = React.memo(() =>{\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TypeTodolistReducer>>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n\r\n    const addToDoList= useCallback( (todolistTitle: string)=> {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    },[dispatch])\r\n\r\n\r\n     useEffect(()=>{\r\n        dispatch(getTodolistsTC())\r\n     },[dispatch])\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>\r\n\r\n                    {todolists.map((newToDoList: TypeTodolistReducer) => {\r\n                        return <Grid style={{padding: '10px'}} key={newToDoList.id} item xs={3}>\r\n                            <Paper elevation={5} style={{padding: '10px'}}>\r\n                                <ToDoList id={newToDoList.id}\r\n                                          title={newToDoList.title}\r\n                                          filter={newToDoList.filter}/>\r\n\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\n\r\nReactDOM.render(   <Provider store={store}><AppWithRedux/></Provider>,  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\",\"test\":\"todolist_test__2Xzk0\"};"],"sourceRoot":""}