{"version":3,"sources":["serviceWorker.ts","dall/todolists-api.tsx","app/appReducer.ts","state/taskReducer.ts","state/todolistReducer.ts","state/store.ts","components/AddItemForm.tsx","components/editSpan.tsx","Tasks/tasks.tsx","ToDoList/ToDoList.tsx","todolists/todolists.tsx","components/SnackBarError.tsx","app/AppWithRedux.tsx","index.tsx","ToDoList/todolist.module.css"],"names":["Boolean","window","location","hostname","match","PriorityType","TypeStatusTask","instance","axios","create","baseURL","withCredentials","headers","GetApi","getTodoLists","get","then","response","data","setTodolist","title","post","removeTodolist","todolistId","delete","updateTodolist","put","reorderTodolist","putAfterItemId","getTasks","createTask","deleteTask","taskId","updateTask","model","reorderTask","initialState","status","error","setStatusAC","type","setErrorAC","AppReducer","state","action","addTaskAC","task","changeTaskAC","getTasksAC","todoListId","tasks","initilalState","RemoveTodolistAC","id","ChangeToddolistAC","changeTodolistFilterAC","filter","rootReducer","combineReducers","copyState","result","map","ts","todolist","todolists","forEach","td","tl","newTodolist","app","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","e","autoFocus","onBlur","changeTaskTitle","onDoubleClick","Completed","Task","dispatch","useDispatch","removeTask","useCallback","res","removeTaskAC","changeTaskNew","getState","a","find","description","completed","priority","startDate","deadline","item","updateTaskTC","changeStatus","checked","Checkbox","IconButton","ToDoList","useSelector","useEffect","items","resultTask","t","New","onAllKeyHandler","onActiveKeyHandler","onCompletedKeyHandler","addTask","resultCode","Error","messages","toString","addTaskTC","changeTodotitle","updateTodolistTC","s","test","style","textAlign","i","Todolists","newToDoList","Grid","padding","xs","Paper","elevation","Alert","CustomizedSnackbars","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","addToDoList","todolistTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","container","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.dad6563d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c9a11d0b-1bf4-4a0d-8b85-3f35229d5cc6'\r\n    }\r\n})\r\n\r\nexport enum PriorityType {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum TypeStatusTask {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport type TypeTodolist = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TypeData = {\r\n    item: TypeTodolist\r\n}\r\nexport type TypeResponseDeleteAndUpdate<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TypeTaskItems = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TypeResponseTask = {\r\n    items: Array<TypeTaskItems>\r\n    totalCount: number\r\n    error: boolean\r\n}\r\nexport type PropertiesType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nconst GetApi = {\r\n    getTodoLists: () => {\r\n        return instance.get<Array<TypeTodolist>>('todo-lists').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    setTodolist: (title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<TypeData>>(`todo-lists`, {title})\r\n    },\r\n    removeTodolist: (todolistId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist: (todolistId: string, title: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    reorderTodolist: (todolistId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/reorder`, {putAfterItemId})\r\n    },\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<TypeResponseTask>(`todo-lists/${todolistId}/tasks?count=10&page=1`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/tasks/${taskId}`,)\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: PropertiesType) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`/todo-lists/${todolistId}/tasks/${taskId}`,\r\n\r\n            model\r\n        )\r\n    },\r\n    reorderTask: (todolistId: string, taskId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<TypeData>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {\r\n            putAfterItemId,\r\n        })\r\n    }\r\n}\r\nexport default GetApi;","\r\nconst initialState:TypeInitialSate = {\r\n    status:\"free\",\r\n    error:null\r\n}\r\n\r\nconst AppReducer=(state:TypeInitialSate=initialState,action:TypeActions):TypeInitialSate=>{\r\n\r\n        switch(action.type){\r\n            case \"appReducer/SET_ERROR\":{\r\n                return{\r\n                    ...state,\r\n                    error:action.error\r\n                }\r\n            }\r\n            case \"appReducer/SET_STATUS\":{\r\n                return{\r\n                    ...state,\r\n                    status:action.status\r\n                }\r\n            }\r\n\r\n            default:return state\r\n\r\n        }\r\n\r\n}\r\n\r\n\r\nexport const setStatusAC = (status:TypeStatus)=>({type:'appReducer/SET_STATUS',status} as const)\r\nexport const setErrorAC = (error:string|null)=>({type:'appReducer/SET_ERROR',error} as const)\r\n\r\nexport type TypeSetStatusAction = ReturnType<typeof setStatusAC>\r\nexport type TypeSetErrorAction = ReturnType<typeof setErrorAC>\r\ntype TypeActions =\r\n    |TypeSetErrorAction\r\n    |TypeSetStatusAction;\r\ntype TypeInitialSate = {\r\n    status:TypeStatus\r\n    error:string|null\r\n}\r\nexport type TypeStatus = 'free'|'loading'|'error'|'successed';\r\nexport default AppReducer;\r\n\r\n\r\n","import {TypeAddTodolistAction, TypeRemoveTodolistAction, TypeSetTodolistAction} from \"./todolistReducer\";\r\nimport GetApi, {PropertiesType, TypeStatusTask, TypeTaskItems, TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setErrorAC, setStatusAC, TypeSetErrorAction, TypeSetStatusAction} from \"../app/appReducer\";\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId} as const\r\n}\r\nexport const addTaskAC = (task: TypeTaskItems) => {\r\n    return {type: 'ADD-TASK', task}  as const\r\n}\r\nexport const changeTaskAC = (task: TypeTaskItems) => {\r\n    return {type: 'CHANGE_TASK', task}  as const\r\n}\r\nexport const AddTodilistAC = (todolist: TypeTodolist) => {\r\n    return {type: 'ADD-TODOLIST', todolist,}  as const\r\n}\r\nexport const RemoveTodolistAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}  as const\r\n}\r\nexport const getTasksAC = (todoListId: string, tasks: Array<TypeTaskItems>) => {\r\n    return {type: 'GET-TASKS', todoListId, tasks} as const\r\n}\r\nlet initilalState: TypeTaskReducer = {}\r\n\r\nexport function taskReducer(state: TypeTaskReducer = initilalState, action: ActionType): TypeTaskReducer {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {...state,\r\n                [action.todoListId]:[...state[action.todoListId].filter((task: TypeTaskItems) => task.id !== action.taskId)]\r\n            }}\r\n\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        }\r\n\r\n        case \"CHANGE_TASK\": {\r\n            const copyState = {...state}\r\n            let result = copyState[action.task.todoListId].map(ts => {\r\n                if (ts.id === action.task.id) {\r\n                    ts = action.task\r\n                    return ts\r\n                }\r\n                return ts\r\n            })\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: result\r\n            }\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return {\r\n               delete :state[action.id],\r\n                ...state\r\n\r\n            }\r\n        }\r\n\r\n\r\n        case \"todolist_reducer/SET_TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(td => {\r\n                copyState[td.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"GET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(task => task)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTaskTC = (todoListId: string): ThunkAction<void, AppRootStateType, unknown,\r\n    ActionType|TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        let result = await GetApi.getTasks(todoListId)\r\n        dispatch(getTasksAC(todoListId, result.data.items))\r\n        dispatch(setStatusAC(\"successed\"))\r\n\r\n    }\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string): ThunkAction<void,\r\n    AppRootStateType, unknown, ActionType|TypeSetErrorAction> =>\r\n     async (dispatch) => {\r\n         try {\r\n             let task = await  GetApi.createTask(todoListId,title)\r\n             if(task.data.resultCode===0){\r\n               dispatch(addTaskAC(task.data.data.item))\r\n            }else {\r\n               throw new Error(task.data.messages[0])\r\n             }\r\n         }catch (e) {\r\n             dispatch(setErrorAC(e.toString()))\r\n         }\r\n\r\n\r\n  }\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    (dispatch) => {\r\n\r\n        GetApi.deleteTask(todoListId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(taskId, todoListId))\r\n\r\n            })\r\n    }\r\n\r\nexport const updateTaskTC = (todoListId: string, taskId: string, title: string): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n\r\n            }\r\n            let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n            dispatch(changeTaskAC(result.data.data.item))\r\n        }\r\n\r\n    }\r\nexport const updateTask1TC = (todoListId: string, taskId: string, status: TypeStatusTask): ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n            }\r\n            let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n            dispatch(changeTaskAC(result.data.data.item))\r\n        }\r\n\r\n    }\r\n\r\nexport type TypeTaskReducer = {\r\n    [key: string]: TypeTaskItems[]\r\n}\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskAC>\r\n    | TypeAddTodolistAction\r\n    | TypeRemoveTodolistAction\r\n    | TypeSetTodolistAction\r\n    | ReturnType<typeof getTasksAC>\r\n\r\n","import {TypeFilter} from \"../app/AppWithRedux\";\r\nimport GetApi, {TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setErrorAC, setStatusAC, TypeSetErrorAction, TypeSetStatusAction} from \"../app/appReducer\";\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): TypeRemoveTodolistAction => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodilistAC = (todolist:TypeTodolist): TypeAddTodolistAction => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\n\r\n\r\nexport const ChangeToddolistAC = (id: string, title: string): TypeChangeTodoolistAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_TITLE\",\r\n        id,\r\n        title\r\n    }\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: TypeFilter): TypeChangeTodoolistFilterAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_FILTER\",\r\n        id,\r\n        filter\r\n    }\r\n}\r\nexport const setTodolist = (todolists:Array<TypeTodolist>)=>{\r\n    return{\r\n        type:'todolist_reducer/SET_TODOLISTS',\r\n        todolists\r\n    } as const\r\n}\r\nexport type TypeSetTodolistAction = ReturnType<typeof setTodolist>\r\nexport type TypeRemoveTodolistAction = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type TypeAddTodolistAction = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist:TypeTodolist\r\n}\r\ntype TypeChangeTodoolistAction = {\r\n    type: \"CHANGE_TODOLIST_TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\ntype TypeChangeTodoolistFilterAction = {\r\n    type: \"CHANGE_TODOLIST_FILTER\"\r\n    id: string\r\n    filter: TypeFilter\r\n}\r\nexport type TypeTodolistReducer = TypeTodolist&{filter:TypeFilter}\r\nlet initialState: Array<TypeTodolistReducer> = []\r\nexport type ActionType =\r\n    TypeRemoveTodolistAction\r\n    | TypeAddTodolistAction\r\n    | TypeChangeTodoolistAction\r\n    | TypeChangeTodoolistFilterAction\r\n    | TypeSetTodolistAction;\r\n\r\nexport function TodolistReducer(state: Array<TypeTodolistReducer> = initialState, action: ActionType): Array<TypeTodolistReducer> {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n\r\n            const newTodolist:any  = action.todolist\r\n            newTodolist.filter = 'all'\r\n            return [\r\n                newTodolist, ...state\r\n            ]\r\n        case \"CHANGE_TODOLIST_TITLE\":\r\n            return state.map((tl) => {\r\n                if (tl.id === action.id) {\r\n\r\n                    return {...tl, title: action.title}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"CHANGE_TODOLIST_FILTER\":\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n\r\n                    return {...tl, filter: action.filter}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"todolist_reducer/SET_TODOLISTS\":{\r\n            return action.todolists.map(td=> {\r\n               return{\r\n                   ...td,\r\n                   filter:\"all\"\r\n               }\r\n            })\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const getTodolistsTC = ():ThunkAction<void, AppRootStateType, unknown, ActionType|TypeSetStatusAction>=>\r\n    async (dispatch)=>{\r\n        dispatch(setStatusAC(\"loading\"))\r\n        let result = await  GetApi.getTodoLists()\r\n        dispatch(setTodolist(result))\r\n        dispatch(setStatusAC(\"successed\"))\r\n\r\n    }\r\nexport const addTodolistTC = (title: string):ThunkAction<void, AppRootStateType, unknown,\r\n    ActionType|TypeSetErrorAction>=>\r\n    async (dispatch)=>{\r\n    try{\r\n        let result= await  GetApi.setTodolist(title)\r\n        if(result.data.resultCode===0){\r\n            dispatch(AddTodilistAC(result.data.data.item))\r\n\r\n        }else{\r\n            throw new Error(result.data.messages[0])\r\n        }\r\n    }catch (e) {\r\n        dispatch(setErrorAC(e.toString()))\r\n    }\r\n\r\n    }\r\nexport const removeTodolistTC = (todolistId: string):ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n        await  GetApi.removeTodolist(todolistId)\r\n        dispatch(RemoveTodolistAC(todolistId))\r\n    }\r\nexport const updateTodolistTC = (todolistId: string,title:string):ThunkAction<void, AppRootStateType, unknown, ActionType>=>\r\n    async (dispatch)=>{\r\n       await  GetApi.updateTodolist(todolistId,title)\r\n        dispatch(ChangeToddolistAC(todolistId,title))\r\n    }\r\n\r\n","import {taskReducer} from './taskReducer';\r\nimport {TodolistReducer} from './todolistReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport AppReducer from \"../app/appReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: TodolistReducer,\r\n    app:AppReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo((props: TypeAddItemProps) =>{\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        if(error){\r\n            setError(null)\r\n\r\n        }\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TypeStatusTask} from \"../dall/todolists-api\";\r\n\r\nexport type TypeEditSpan={\r\n    title:string\r\n    changeTaskTitle: ( title: string) => void\r\n    status?:TypeStatusTask\r\n\r\n\r\n}\r\n\r\nconst EditSpan = React.memo((props:TypeEditSpan)=>{\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{\r\n        setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n\r\n        editMode?<TextField value={text}  size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span onDoubleClick={onEditMode} className={(props.status===TypeStatusTask.Completed) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n})\r\nexport default EditSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport { removeTaskTC, updateTask1TC, updateTaskTC} from \"../state/taskReducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TypeTaskItems} from \"../dall/todolists-api\";\r\n\r\nexport type TypePropsTask = {\r\n    task:TypeTaskItems\r\n    todolistId: string\r\n\r\n}\r\nconst Task =  React.memo((props:TypePropsTask)=>{\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback( () => {\r\n\r\n        dispatch(removeTaskTC(props.todolistId,props.task.id))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeTaskNew = useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todolistId,props.task.id, title))\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        dispatch(updateTask1TC(props.todolistId,props.task.id,\r\n\r\n            e.currentTarget.checked?2:0, ))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    return <>\r\n\r\n\r\n            <div><Checkbox color={\"primary\"}\r\n                           onChange={changeStatus}\r\n                           checked={props.task.status===0?false:true}/>\r\n                <EditSpan\r\n                    title={props.task.title}\r\n                    changeTaskTitle={changeTaskNew}\r\n                    status={props.task.status}\r\n                />\r\n\r\n                <span><IconButton onClick={removeTask}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n            </div>\r\n\r\n\r\n\r\n\r\n    </>\r\n\r\n})\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport s from './todolist.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeTodolistFilterAC, removeTodolistTC, updateTodolistTC} from \"../state/todolistReducer\";\r\nimport {addTaskTC, getTaskTC, TypeTaskReducer} from \"../state/taskReducer\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport Task from \"../Tasks/tasks\";\r\nimport {TypeStatusTask, TypeTaskItems} from \"../dall/todolists-api\";\r\nimport {TypeFilter} from \"../app/AppWithRedux\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    filter:TypeFilter\r\n}\r\n\r\n\r\n\r\nexport const ToDoList = React.memo( (props: PropsType) => {\r\n    const tasks = useSelector<AppRootStateType, TypeTaskReducer>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(props.id))\r\n    },[dispatch,props.id])\r\n    let resultTask = tasks[props.id];\r\n\r\n    if (props.filter === \"active\") {\r\n\r\n        resultTask = tasks[props.id].filter((t:TypeTaskItems) => t.status === TypeStatusTask.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        resultTask = tasks[props.id].filter(t => t.status === TypeStatusTask.Completed)\r\n    }\r\n\r\n    const onAllKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'all'))\r\n    },[dispatch,props.id])\r\n    const onActiveKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'active'))\r\n\r\n    },[dispatch,props.id])\r\n    const onCompletedKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'completed'))\r\n\r\n    },[dispatch,props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(props.id,title))\r\n    },[dispatch,props.id])\r\n    const changeTodotitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTC(props.id, title))\r\n    },[dispatch,props.id])\r\n    return (<div>\r\n        <div>\r\n            <div className={s.delete}><IconButton\r\n                onClick={() => dispatch(removeTodolistTC(props.id))}><DeleteForeverIcon/></IconButton></div>\r\n\r\n            <h3 className={s.test} style={{textAlign: 'center'}}>\r\n                <EditSpan\r\n                    title={props.title}\r\n                    changeTaskTitle={changeTodotitle}/>\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask}/>\r\n\r\n            {resultTask.map((i: TypeTaskItems) => {\r\n              return  <Task todolistId={props.id} task={i}\r\n                             key={i.id}  />\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={props.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={props.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={props.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n})","import React from 'react';\r\nimport {TypeTodolistReducer} from \"../state/todolistReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {ToDoList} from \"../ToDoList/ToDoList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nconst Todolists = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TypeTodolistReducer>>(state => state.todolists)\r\n\r\n    return <>\r\n        {todolists.map((newToDoList: TypeTodolistReducer) => {\r\n            return <Grid style={{padding: '10px'}} key={newToDoList.id} item xs={3}>\r\n                <Paper elevation={5} style={{padding: '10px'}}>\r\n                    <ToDoList id={newToDoList.id}\r\n                              title={newToDoList.title}\r\n                              filter={newToDoList.filter}/>\r\n\r\n\r\n                </Paper>\r\n            </Grid>\r\n        })}\r\n        </>}\r\n        export default Todolists","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setErrorAC} from '../app/appReducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport default function CustomizedSnackbars() {\r\n\r\n   const error = useSelector<AppRootStateType,string|null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={error!==null} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTodolistTC, getTodolistsTC} from \"../state/todolistReducer\";\r\nimport Todolists from \"../todolists/todolists\";\r\nimport CustomizedSnackbars from \"../components/SnackBarError\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {TypeStatus} from \"./appReducer\";\r\n\r\nexport type TypeFilter = 'all' | 'active' | 'completed';\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType,TypeStatus>(state => state.app.status)\r\n    const addToDoList = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status===\"loading\"?<LinearProgress />:\"\"}\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>\r\n                    <Todolists/>\r\n                </Grid>\r\n                <CustomizedSnackbars/>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\n\r\n\r\nReactDOM.render(   <Provider store={store}><AppWithRedux/></Provider>,  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\",\"test\":\"todolist_test__2Xzk0\"};"],"sourceRoot":""}