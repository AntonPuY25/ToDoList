{"version":3,"sources":["ToDoList/todolist.module.css","serviceWorker.ts","state/taskReducer.ts","state/todolistReducer.ts","state/store.ts","AddItemForm.tsx","editSpan.tsx","ToDoList/ToDoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","addTaskAC","title","todolistId","type","initilalState","RemoveTodolistAC","id","initialState","rootReducer","combineReducers","tasks","state","action","copyState","filter","task","taskId","newTask","v1","isDone","map","todolists","tl","newToDolist","store","createStore","AddItemForm","props","useState","setTitle","error","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","e","autoFocus","onBlur","changeTaskTitle","onDoubleClick","ToDoList","style","textAlign","changeTodolistTitle","s","delete","IconButton","removeTodoList","addTask","i","Checkbox","changeStatus","checked","changeFilter","AppWithRedux","useSelector","dispatch","useDispatch","toDoListId","deleteTask","filterValue","toDoListID","toDiListId","changeTaskStatusAC","changeTaskTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","todolistTitle","newToDoList","resultTask","t","padding","item","xs","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3b875c07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TypeTaskState} from \"../App\";\r\nimport {PropsTypeTask} from \"../ToDoList/ToDoList\";\r\nimport {TypeAddTodolistAction, TypeRemoveTodolistAction} from \"./todolistReducer\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): TypeAction1 => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string,todolistId: string): TypetAction2 => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId:string,isDone:boolean,todolistId: string,): TypetAction3 => {\r\n    return {type: 'CHANGE_TASK', taskId,todolistId, isDone}\r\n}\r\nexport const changeTaskTitleAC = (taskId:string,title:string,todolistId: string,): TypetAction4 => {\r\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todolistId,}\r\n}\r\nexport const AddTodilistAC = (title:string,):TypeAddTodolistAction=>{\r\n    return { type:'ADD-TODOLIST',title,todolistId:v1()}\r\n}\r\nexport const RemoveTodolistAC = (todolistId: string): TypeRemoveTodolistAction => {\r\n    return {  type:'REMOVE-TODOLIST', id: todolistId}\r\n}\r\ntype TypeAction1 = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type TypetAction2 = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype TypetAction3 = {\r\n    type: 'CHANGE_TASK'\r\n    taskId:string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\ntype TypetAction4 = {\r\n    type: 'CHANGE_TASK_TITLE'\r\n    taskId:string\r\n    title: string\r\n    todolistId: string\r\n}\r\nlet initilalState:TypeTaskState = {\r\n\r\n\r\n}\r\n\r\nexport type ActionType = TypeAction1 | TypetAction2|TypetAction3|TypetAction4|TypeAddTodolistAction|TypeRemoveTodolistAction\r\n\r\nexport function taskReducer(state: TypeTaskState=initilalState, action: ActionType): TypeTaskState {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = copyState[action.todolistId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n\r\n            let newTask: PropsTypeTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]]\r\n            }\r\n        }\r\n        case \"CHANGE_TASK\":{\r\n\r\n            return {...state,\r\n                [action.todolistId]:[...state[action.todolistId].map(task=>{\r\n                    if(task.id===action.taskId){\r\n                        task.isDone=action.isDone\r\n                        return task\r\n                    }\r\n                    return  task\r\n                })]\r\n            }\r\n        }\r\n        case \"CHANGE_TASK_TITLE\":{\r\n            return {...state,\r\n                [action.todolistId]:[...state[action.todolistId].map(task=>{\r\n                    if(task.id===action.taskId){\r\n                        task.title=action.title\r\n                        return task\r\n                    }\r\n                    return  task\r\n                })]\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:[]\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n","import {FilterTypes, ToDoListsType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): TypeRemoveTodolistAction => {\r\n    return {  type:'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodilistAC = (title:string):TypeAddTodolistAction=>{\r\n    return { type:'ADD-TODOLIST',title,todolistId:v1()}\r\n}\r\n\r\n\r\nexport const ChangeToddolistAC = (id:string,title:string):TypeChangeTodoolistAction=>{\r\n return {\r\n     type:\"CHANGE_TODOLIST_TITLE\",\r\n     id,\r\n     title\r\n }\r\n}\r\nexport const changeTodolistFilterAC = (id:string,filter:FilterTypes):TypeChangeTodoolistFilterAction=>{\r\n    return {\r\n        type:\"CHANGE_TODOLIST_FILTER\",\r\n        id,\r\n        filter\r\n    }\r\n}\r\nexport type TypeRemoveTodolistAction = {\r\n    type:'REMOVE-TODOLIST'\r\n    id:string\r\n}\r\nexport type TypeAddTodolistAction = {\r\n    type:'ADD-TODOLIST'\r\n    title:string\r\n    todolistId:string\r\n}\r\ntype TypeChangeTodoolistAction = {\r\n    type:\"CHANGE_TODOLIST_TITLE\"\r\n    id:string\r\n    title:string\r\n}\r\ntype TypeChangeTodoolistFilterAction = {\r\n    type:\"CHANGE_TODOLIST_FILTER\"\r\n    id:string\r\n    filter:FilterTypes\r\n}\r\nlet initialState:Array<ToDoListsType> = []\r\nexport type ActionType =TypeRemoveTodolistAction |TypeAddTodolistAction|TypeChangeTodoolistAction|TypeChangeTodoolistFilterAction;\r\nexport function TodolistReducer (state: Array<ToDoListsType> = initialState,action:ActionType):Array<ToDoListsType>{\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newToDolist: ToDoListsType = {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [\r\n                ...state, newToDolist\r\n            ]\r\n        case \"CHANGE_TODOLIST_TITLE\":\r\n          return state.map(tl=>{\r\n                if(tl.id === action.id){\r\n                    return{...tl,title:action.title}\r\n                }\r\n                    return  tl\r\n\r\n            })\r\n        case \"CHANGE_TODOLIST_FILTER\":\r\n            return state.map(tl=>{\r\n            if(tl.id === action.id){\r\n                return{...tl,filter:action.filter}\r\n            }\r\n            return  tl\r\n\r\n        })\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import {taskReducer} from './taskReducer';\r\nimport {TodolistReducer} from './todolistReducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: TodolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: TypeAddItemProps) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\ntype TypeEditSpan={\r\n    title:string\r\n    isDone?:boolean\r\n    changeTaskTitle: ( title: string) => void\r\n\r\n}\r\n\r\nfunction EditSpan(props:TypeEditSpan){\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n        editMode?<TextField value={text}  size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span onDoubleClick={onEditMode} className={(props.isDone) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n}\r\nexport default EditSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {FilterTypes} from \"../App\";\r\nimport AddItemForm from \"../AddItemForm\";\r\nimport EditSpan from \"../editSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport s from './todolist.module.css'\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<PropsTypeTask>\r\n    addTask: (title: string, toDoListId: string) => void\r\n    delete: (id: string, toDoListId: string) => void\r\n    changeFilter: (str: FilterTypes, toDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, toDiListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDiListId: string) => void\r\n    filter: FilterTypes\r\n    id: string\r\n    removeTodoList: (toDoListID: string) => void\r\n    changeTodolistTitle: (title: string, toDiListId: string) => void\r\n\r\n}\r\n\r\nexport type PropsTypeTask = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n\r\n    // let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n    // const [title, setTitle] = useState<string>(\"\")\r\n    // const addTask = () => {\r\n    //     const taskTitle = title.trim()\r\n    //     if (taskTitle) {\r\n    //         props.addTask(taskTitle, props.id)\r\n    //         setTitle('')\r\n    //     } else {\r\n    //         setError('Title is Required')\r\n    //     }\r\n    // }\r\n    // const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(event.currentTarget.value)\r\n    //     setError(null)\r\n    // }\r\n    // const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (event.key === 'Enter') addTask()\r\n    // }\r\n    const onAllKeyHandler = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveKeyHandler = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedKeyHandler = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n     const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodotitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    return (<div>\r\n        <div>\r\n            <h3 style={{textAlign:'center'}}><EditSpan title={props.title}\r\n                          changeTaskTitle={changeTodotitle}/>\r\n                <div className={s.delete}><IconButton\r\n                    onClick={() => props.removeTodoList(props.id)}><DeleteForeverIcon/></IconButton></div>\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask}/>\r\n\r\n            {/*<div>*/}\r\n            {/*    <input className={error ? 'error' : \"\"}*/}\r\n            {/*           value={title}*/}\r\n            {/*           onChange={onChangeHandlerInput}*/}\r\n            {/*           onKeyPress={onKeyHandlerInput}*/}\r\n\r\n            {/*    />*/}\r\n\r\n\r\n            {/*    <button onClick={addTask}>+*/}\r\n            {/*    </button>*/}\r\n            {/*    {error ? <div className={'error-message'}>{error}</div> : null}*/}\r\n            {/*</div>*/}\r\n\r\n            {props.tasks.map((i: PropsTypeTask) => {\r\n                const removeTask = () => {\r\n                    props.delete(i.id, props.id)\r\n                }\r\n                const changeTaskNew = (title: string) => {\r\n                    props.changeTaskTitle(i.id, title, props.id)\r\n                }\r\n                const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus(i.id, e.currentTarget.checked, props.id)\r\n                }\r\n                return (<div key={i.id}>\r\n                        <div><Checkbox color={\"primary\"}\r\n                            onChange={changeStatus}\r\n                            checked={i.isDone}/>\r\n                            <EditSpan title={i.title} isDone={i.isDone}\r\n                                      changeTaskTitle={changeTaskNew}/>\r\n                            {/*<span className={(i.isDone === true) ? 'is-done' : \"\"}>{i.title}</span>*/}\r\n                            <span><IconButton onClick={removeTask}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                )\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={props.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={props.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={props.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList/ToDoList\";\r\nimport {PropsTypeTask} from './ToDoList/ToDoList';\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {changeTodolistFilterAC, RemoveTodolistAC} from \"./state/todolistReducer\";\r\nimport {\r\n    addTaskAC,\r\n    AddTodilistAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n\r\n} from \"./state/taskReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\n\r\n\r\nexport type FilterTypes = \"all\" | \"active\" | \"completed\";\r\nexport type TypeTaskState = {\r\n    [key: string]: Array<PropsTypeTask>\r\n}\r\nexport type ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterTypes\r\n\r\n}\r\nexport const todolistID1 = v1();\r\nexport const todolistID2 = v1();\r\n\r\nexport function AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType,Array<ToDoListsType>>(state=>state.todolists)\r\n    const tasks = useSelector<AppRootStateType,TypeTaskState>(state =>state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    function addTask(title: string,toDoListId: string) {\r\n        dispatch(addTaskAC(title,toDoListId))\r\n\r\n    }\r\n\r\n    let deleteTask = (id: string, toDoListId: string) => {\r\n        dispatch(removeTaskAC(id,toDoListId))\r\n    }\r\n\r\n\r\n    function changeFilter(filterValue: FilterTypes, toDoListID: string) {\r\n        dispatch(changeTodolistFilterAC(toDoListID,filterValue))\r\n    }\r\n\r\n    function removeTodoList(toDoListID: string) {\r\n        dispatch(RemoveTodolistAC(toDoListID))\r\n        dispatch(RemoveTodolistAC(toDoListID))\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, toDiListId: string) {\r\n        dispatch(changeTaskStatusAC(taskId,isDone,toDiListId))\r\n    }\r\n\r\n    function addToDoList(todolistTitle: string) {\r\n\r\n        dispatch(AddTodilistAC(todolistTitle))\r\n\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, toDiListId: string) {\r\n        dispatch(changeTaskTitleAC(taskId, title, toDiListId))\r\n    }\r\n    function changeTodolistTitle(title: string,toDiListId: string) {\r\n        dispatch(addTaskAC(title,toDiListId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>{todolists.map((newToDoList: ToDoListsType) => {\r\n\r\n                    let resultTask = tasks[newToDoList.id];\r\n\r\n                    if (newToDoList.filter === \"active\") {\r\n                        resultTask = tasks[newToDoList.id].filter(t => t.isDone === false)\r\n                    }\r\n                    if (newToDoList.filter === \"completed\") {\r\n                        resultTask = tasks[newToDoList.id].filter(t => t.isDone === true)\r\n                    }\r\n                    return <Grid style={{padding: '10px'}} key={newToDoList.id} item xs={3}>\r\n                        <Paper elevation={5} style={{padding: '10px'}}>\r\n                            <ToDoList id={newToDoList.id}\r\n                                      title={newToDoList.title} tasks={resultTask}\r\n                                      addTask={addTask} delete={deleteTask} changeStatus={changeStatus}\r\n                                      changeFilter={changeFilter} filter={newToDoList.filter}\r\n                                      removeTodoList={removeTodoList} changeTaskTitle={changeTaskTitle}\r\n                                      changeTodolistTitle={changeTodolistTitle}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })}</Grid>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\n\r\nReactDOM.render(   <Provider store={store}><AppWithRedux/></Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}