{"version":3,"sources":["serviceWorker.ts","dall/todolists-api.tsx","state/loginReducer.ts","app/appReducer.ts","components/functionErrorApi.ts","state/todolistReducer.ts","state/taskReducer.ts","state/store.ts","components/AddItemForm.tsx","components/editSpan.tsx","Tasks/tasks.tsx","ToDoList/ToDoList.tsx","todolists/todolists.tsx","components/SnackBarError.tsx","login/login.tsx","app/AppWithRedux.tsx","index.tsx","ToDoList/todolist.module.css"],"names":["Boolean","window","location","hostname","match","PriorityType","TypeStatusTask","instance","axios","create","baseURL","withCredentials","headers","getIsAuth","email","password","rememberMe","post","then","response","data","get","delete","GetApi","getTodoLists","setTodolist","title","removeTodolist","todolistId","updateTodolist","put","reorderTodolist","putAfterItemId","getTasks","createTask","deleteTask","taskId","updateTask","model","reorderTask","slice","createSlice","name","initialState","isAuth","reducers","setIsAuthAC","state","action","payload","LoginReducer","reducer","actions","status","error","isInitial","setStatusAC","setErrorAC","setIsInitialAC","AppReducer","functionErrorApi","dispatch","resultCode","setStatusDisabled","disabled","Error","messages","RemoveTodolistAC","functionErrorNetwork","e","toString","todolist","findIndex","tl","id","splice","AddTodolistAC","newTodolist","filter","unshift","ChangeTodolistAC","map","td","changeTodolistFilterAC","todolists","disabledStatus","TodolistReducer","removeTaskAC","task","todoListId","addTaskAC","push","changeTaskAC","changeTaskDisabledAC","getTasksAC","tasks","extraReducers","builder","addCase","forEach","taskReducer","rootReducer","combineReducers","app","login","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","disabledButton","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","autoFocus","onBlur","changeTaskTitle","onDoubleClick","Completed","Task","useDispatch","removeTask","useCallback","res","catch","changeTaskNew","getState","a","find","ts","description","completed","priority","startDate","deadline","result","item","updateTaskTitleTC","changeStatus","checked","Checkbox","IconButton","ToDoList","useSelector","useEffect","items","resultTask","t","New","onAllKeyHandler","onActiveKeyHandler","onCompletedKeyHandler","addTask","addTaskTC","changeTodotitle","updateTodolistTC","s","test","style","textAlign","i","Todolists","newToDoList","Grid","padding","xs","Paper","elevation","Alert","CustomizedSnackbars","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","length","initialValues","onSubmit","getIsAuthTC","console","log","to","container","justify","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","touched","errors","type","FormControlLabel","control","AppWithRedux","addToDoList","todolistTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","exact","path","render","top","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"gRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICRMC,EAQAC,E,yCAhBNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAIPP,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,cAQAC,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,KAsDL,IAAMO,EACH,SAACC,EAAcC,EAAgBC,GACjC,OAAOT,EAASU,KAAoD,cAAc,CAACH,QAAMC,WAASC,eAAaE,MAAK,SAAAC,GAChH,OAAQA,EAASC,SAHhBP,EAMM,WACX,OAAON,EAASc,IAA6C,YAAYH,MAAK,SAAAC,GAC1E,OAAQA,EAASC,SARhBP,EAWD,WACJ,OAAON,EAASe,OAAoC,eAAeJ,MAAK,SAAAC,GACpE,OAAOA,EAASC,SA4CbG,EAvCA,CACXC,aAAc,WACV,OAAOjB,EAASc,IAAyB,cAAcH,MAAK,SAAAC,GACxD,OAAOA,EAASC,SAGxBK,YAAa,SAACC,GACV,OAAOnB,EAASU,KAAT,aAAmE,CAACS,WAE/EC,eAAgB,SAACC,GACb,OAAOrB,EAASe,OAAT,qBAA2DM,KAEtEC,eAAgB,SAACD,EAAoBF,GACjC,OAAOnB,EAASuB,IAAT,qBAAwDF,GAAc,CAACF,WAElFK,gBAAiB,SAACH,EAAoBI,GAClC,OAAOzB,EAASuB,IAAT,sBAAyDF,EAAzD,YAA+E,CAACI,oBAE3FC,SAAU,SAACL,GACP,OAAOrB,EAASc,IAAT,qBAA6CO,EAA7C,4BAEXM,WAAY,SAACN,EAAoBF,GAC7B,OAAOnB,EAASU,KAAT,qBAAkFW,EAAlF,UAAsG,CAACF,WAElHS,WAAY,SAACP,EAAoBQ,GAC7B,OAAO7B,EAASe,OAAT,sBAA4DM,EAA5D,kBAAgFQ,KAE3FC,WAAY,SAACT,EAAoBQ,EAAgBE,GAC7C,OAAO/B,EAASuB,IAAT,sBAAkFF,EAAlF,kBAAsGQ,GAEzGE,IAGRC,YAAa,SAACX,EAAoBQ,EAAgBJ,GAC9C,OAAOzB,EAASuB,IAAT,sBAAmEF,EAAnE,kBAAuFQ,GAAU,CACpGJ,qB,QClHNQ,EAAQC,YAAY,CACtBC,KAAM,QACNC,aAPiB,CACjBC,QAAQ,GAORC,SAAU,CACNC,YADM,SACMC,EAAOC,GACfD,EAAMH,OAASI,EAAOC,QAAQL,WAIpCM,EAAeV,EAAMW,QACbL,EAAeN,EAAMY,QAArBN,YAwCCI,ICjDTV,EAAQC,YAAY,CACtBC,KAAM,MACNC,aATkC,CAClCU,OAAQ,OACRC,MAAO,KACPC,WAAW,GAOXV,SAAU,CACNW,YADM,SACMT,EAAOC,GACfD,EAAMM,OAASL,EAAOC,QAAQI,QAElCI,WAJM,SAIKV,EAAOC,GACdD,EAAMO,MAAQN,EAAOC,QAAQK,OAEjCI,eAPM,SAOSX,EAAOC,GAClBD,EAAMQ,UAAYP,EAAOC,QAAQM,cAOvCI,EAAanB,EAAMW,Q,EAC8BX,EAAMY,QAA/CI,E,EAAAA,YAAYC,E,EAAAA,WAAWC,E,EAAAA,eA2BtBC,I,QCtDFC,EACT,SAACxC,EAASQ,EAAmBiC,GACzB,GAAwB,IAApBzC,EAAK0C,WAOL,MAFAD,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASE,EAAkB,CAACnC,aAAWoC,UAAS,KACzC,IAAIC,MAAM7C,EAAK8C,SAAS,IAN/BL,EAASM,EAAiB,CAACvC,gBAC3BiC,EAASL,EAAY,CAACH,OAAO,eAC7BQ,EAASE,EAAkB,CAACnC,aAAWoC,UAAS,MAU/CI,EAAqB,SAACC,EAAMR,EAAkBjC,GACvDiC,EAASJ,EAAWY,EAAEC,aACtBT,EAASE,EAAkB,CAACnC,aAAWoC,UAAS,KAChDH,EAASL,EAAY,CAACH,OAAO,YCb3Bb,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ2C,GAK3CE,SAAU,CACNsB,iBADM,SACWpB,EAAOC,GACpB,IAAIuB,EAAWxB,EAAMyB,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAO1B,EAAOC,QAAQrB,cAC9DmB,EAAM4B,OAAOJ,EAAU,IAE3BK,cALM,SAKQ7B,EAAOC,GACjB,IAAI6B,EAAmB7B,EAAOC,QAAQsB,SACtCM,EAAYC,OAAS,MACrB/B,EAAMgC,QAAQF,IAIlBG,iBAZM,SAYWjC,EAAOC,GACnBD,EAAMkC,KAAI,SAACC,GAIL,OAHIA,EAAGR,KAAO1B,EAAOC,QAAQrB,aAC1BsD,EAAGxD,MAAQsB,EAAOC,QAAQvB,OAEtBwD,MAGlBC,uBApBM,SAoBiBpC,EAAOC,GAC1BD,EAAMkC,KAAI,SAAAC,GAIN,OAHIA,EAAGR,KAAO1B,EAAOC,QAAQyB,KACzBQ,EAAGJ,OAAS9B,EAAOC,QAAQ6B,QAExBI,MAGfzD,YA5BM,SA4BMsB,EAAOC,GAEhB,OAAgBA,EAAOC,QAAQmC,UAAUH,KAAI,SAAAC,GACxC,OAAO,2BACAA,GADP,IAEIJ,OAAO,MACPO,gBAAe,QAM3BtB,kBAxCM,SAwCYhB,EAAOC,GACrBD,EAAMkC,KAAI,SAAAC,GAIN,OAHQA,EAAGR,KAAO1B,EAAOC,QAAQrB,aACzBsD,EAAGG,eAAiBrC,EAAOC,QAAQe,UAEpCkB,S,EAgBnB1C,EAAMY,QANNe,E,EAAAA,iBACAS,E,EAAAA,cACAI,E,EAAAA,iBACAG,E,EAAAA,uBACA1D,E,EAAAA,YACAsC,E,EAAAA,kBAISuB,EAAkB9C,EAAMW,QC/D/BX,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAJgC,GAKhCE,SAAU,CACN0C,aADM,SACOxC,EAAOC,GAChB,IAAIwC,EAAOzC,EAAMC,EAAOC,QAAQwC,YAAYjB,WAAU,SAAAgB,GAAI,OAAIA,EAAKd,KAAO1B,EAAOC,QAAQb,UACzFW,EAAMC,EAAOC,QAAQwC,YAAYd,OAAOa,EAAM,IAElDE,UALM,SAKI3C,EAAOC,GACbD,EAAMC,EAAOC,QAAQuC,KAAKC,YAAYE,KAAK3C,EAAOC,QAAQuC,OAE9DI,aARM,SAQO7C,EAAOC,GAChBD,EAAMC,EAAOC,QAAQuC,KAAKC,YAAYR,KAAI,SAAAO,GAKtC,OAJIA,EAAKd,KAAO1B,EAAOC,QAAQuC,KAAKd,KAChCc,EAAK9D,MAAQsB,EAAOC,QAAQuC,KAAK9D,MACjC8D,EAAKnC,OAASL,EAAOC,QAAQuC,KAAKnC,QAE/BmC,MAGfK,qBAjBM,SAiBe9C,EAAOC,GACxBD,EAAMC,EAAOC,QAAQwC,YAAYR,KAAI,SAAAO,GAIjC,OAHIA,EAAKd,KAAO1B,EAAOC,QAAQb,SAC3BoD,EAAKH,eAAiBrC,EAAOC,QAAQe,UAElCwB,MAGfM,WAzBM,SAyBK/C,EAAOC,GAEdD,EAAMC,EAAOC,QAAQwC,YAAczC,EAAOC,QAAQ8C,QAK1DC,cAAe,SAACC,GACZA,EACKC,QAAQtB,GAAe,SAAC7B,EAAOC,GAC5BD,EAAMC,EAAOC,QAAQsB,SAASG,IAAM,MAE5CuB,EAAQC,QAAQ/B,GAAkB,SAACpB,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQrB,eAGhCqE,EAAQC,QAAQzE,GAAa,SAACsB,EAAOC,GACjCA,EAAOC,QAAQmC,UAAUe,SAAQ,SAAAjB,GAC7BnC,EAAMmC,EAAGR,IAAI,YAShB0B,EAAc5D,EAAMW,Q,EACwDX,EAAMY,QAAjFmC,E,EAAAA,aAAcG,E,EAAAA,UAAWE,E,EAAAA,aAAcC,E,EAAAA,qBAAsBC,E,EAAAA,W,gBC3DrEO,EAAcC,YAAgB,CAChCP,MAAOK,EACPhB,UAAWE,EACXiB,IAAI5C,EACJ6C,MAAMtD,IAIGuD,GAAQC,YAAe,CAChCvD,QAAQkD,EACRM,WAAW,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,QAStE7G,OAAOwG,MAAQA,G,wCCsBAM,GAzCKC,IAAMC,MAAK,SAACC,GAA4B,IAAD,EAC7BC,mBAAiB,IADY,oBAChDzF,EADgD,KACzC0F,EADyC,OAE/BD,mBAAqC,MAFN,oBAElD7D,EAFkD,KAE3C+D,EAF2C,KAcjDC,EAAU,WACZ,IAAMC,EAAY7F,EAAM8F,OACpBD,GACAL,EAAMO,SAASF,GACfH,EAAS,KAETC,EAAS,sBAGjB,OAAO,6BACH,6BACI,kBAACK,GAAA,EAAD,CACIC,MAAM,aACNrE,QAASA,EACTsE,UAAWtE,EAAQ,QAAU,GAC7BuE,MAAOnG,EACPoG,SA1BiB,SAACC,GAC1BX,EAASW,EAAMC,cAAcH,OAC1BvE,GACC+D,EAAS,OAwBLY,WApBc,SAACF,GACL,UAAdA,EAAMG,KAAiBZ,KAoBnBa,WAAY7E,IAIhB,kBAAC8E,GAAA,EAAD,CAAQpE,SAAUkD,EAAMmB,eAAgBC,MAAO,UAAWC,QAAS,YAAaC,KAAM,QAASC,QAASnB,GAAxG,U,oGCZGoB,GAtBE1B,IAAMC,MAAK,SAACC,GAAsB,IAAD,EACfC,oBAAkB,GADH,oBACvCwB,EADuC,KAC9BC,EAD8B,OAEvBzB,mBAAiBD,EAAMxF,OAFA,oBAEvCmH,EAFuC,KAElCC,EAFkC,KAe9C,OAEIH,EAAS,kBAACjB,GAAA,EAAD,CAAWG,MAAOgB,EAAML,KAAM,QAASV,SANjC,SAACzD,GAChByE,EAAQzE,EAAE2D,cAAcH,QAK8CkB,WAAS,EAACC,OAVjE,WACfJ,GAAY,GACTC,EAAKrB,QAASN,EAAM+B,gBAAgBJ,EAAKrB,WAS1C,0BAAO0B,cAfM,WACfN,GAAY,IAcwBhB,UAAYV,EAAM7D,SAAS/C,EAAe6I,UAAa,UAAY,IAAKjC,EAAMxF,U,sECsB3G0H,GAvCDpC,IAAMC,MAAK,SAACC,GACtB,IAAMrD,EAAWwF,cAEXC,EAAaC,uBAAa,WJ0GR,IAAC9D,EAAoBrD,EIzGzCyB,GJyGqB4B,EIzGCyB,EAAMtF,WJyGaQ,EIzGF8E,EAAM1B,KAAKd,GJ2GtD,SAACb,GACGA,EAASL,EAAY,CAACH,OAAQ,aAC9BQ,EAASgC,EAAqB,CAACzD,SAAQqD,aAAYzB,UAAU,KAC7DzC,EAAOY,WAAWsD,EAAYrD,GACzBlB,MAAK,SAAAsI,GACF,GAA4B,IAAxBA,EAAIpI,KAAK0C,WAQT,MAFAD,EAASL,EAAY,CAACH,OAAQ,WAC9BQ,EAASgC,EAAqB,CAACzD,SAAQqD,aAAYzB,UAAU,KACvD,IAAIC,MAAMuF,EAAIpI,KAAK8C,SAAS,IAPlCL,EAAS0B,EAAa,CAACnD,SAAQqD,gBAC/B5B,EAASL,EAAY,CAACH,OAAQ,eAC9BQ,EAASgC,EAAqB,CAACzD,SAAQqD,aAAYzB,UAAU,QAQpEyF,OAAM,SAAApF,GACHR,EAASJ,EAAWY,EAAEC,aACtBT,EAASL,EAAY,CAACH,OAAQ,mBI3HxC,CAACQ,EAASqD,EAAM1B,KAAKd,GAAGwC,EAAMtF,aAC1B8H,EAAgBH,uBAAY,SAAC7H,GAC/BmC,EJ8HyB,SAAC4B,EAAoBrD,EAAgBV,GAArC,8CAI7B,WAAOmC,EAAoB8F,GAA3B,qBAAAC,EAAA,yDACU7D,EAAQ4D,IAAW5D,QACnBP,EAAOO,EAAMN,GAAYoE,MAAK,SAAAC,GAAE,OAAIA,EAAGpF,KAAOtC,MAFxD,wBAIcE,EAAwB,CAC1BZ,MAAOA,EACPqI,YAAavE,EAAKuE,YAClBC,UAAWxE,EAAKwE,UAChB3G,OAAQmC,EAAKnC,OACb4G,SAAUzE,EAAKyE,SACfC,UAAW1E,EAAK0E,UAChBC,SAAU3E,EAAK2E,UAX3B,SAeYtG,EAASL,EAAY,CAACH,OAAQ,aAf1C,SAgB+B9B,EAAOc,WAAWmD,EAAKC,WAAYD,EAAKd,GAAIpC,GAhB3E,UAiB2C,KAD3B8H,EAhBhB,QAiBuBhJ,KAAK0C,WAjB5B,iBAkBgBD,EAAS+B,EAAa,CAACJ,KAAM4E,EAAOhJ,KAAKA,KAAKiJ,QAC9CxG,EAASL,EAAY,CAACH,OAAQ,eAnB9C,8BAqBgBQ,EAASL,EAAY,CAACH,OAAQ,WACxB,IAAIY,MAAMmG,EAAOhJ,KAAK8C,SAAS,IAtBrD,0DAyBYL,EAASJ,EAAW,KAAEa,aACtBT,EAASL,EAAY,CAACH,OAAQ,WA1B1C,0DAJ6B,wDI9HhBiH,CAAkBpD,EAAMtF,WAAWsF,EAAM1B,KAAKd,GAAIhD,MAC7D,CAACmC,EAASqD,EAAM1B,KAAKd,GAAGwC,EAAMtF,aAC1B2I,EAAehB,uBAAY,SAAClF,GJiKlC,IAACoB,EAAoBrD,EAAgBiB,EI/JjCQ,GJ+JH4B,EI/J+ByB,EAAMtF,WJ+JjBQ,EI/J4B8E,EAAM1B,KAAKd,GJ+JvBrB,EI7J7BgB,EAAE2D,cAAcwC,QAAQ,EAAE,EJ6JlC,uCAEI,WAAO3G,EAAoB8F,GAA3B,qBAAAC,EAAA,yDACU7D,EAAQ4D,IAAW5D,QACnBP,EAAOO,EAAMN,GAAYoE,MAAK,SAAAC,GAAE,OAAIA,EAAGpF,KAAOtC,MAFxD,wBAKcE,EAAwB,CAC1BZ,MAAO8D,EAAK9D,MACZqI,YAAavE,EAAKuE,YAClBC,UAAWxE,EAAKwE,UAChB3G,OAAQA,EACR4G,SAAUzE,EAAKyE,SACfC,UAAW1E,EAAK0E,UAChBC,SAAU3E,EAAK2E,UAZ3B,SAeYtG,EAASL,EAAY,CAACH,OAAQ,aAf1C,SAgB+B9B,EAAOc,WAAWmD,EAAKC,WAAYD,EAAKd,GAAIpC,GAhB3E,UAiB2C,KAD3B8H,EAhBhB,QAiBuBhJ,KAAK0C,WAjB5B,iBAkBgBD,EAAS+B,EAAa,CAACJ,KAAM4E,EAAOhJ,KAAKA,KAAKiJ,QAC9CxG,EAASL,EAAY,CAACH,OAAQ,eAnB9C,8BAqBgBQ,EAASL,EAAY,CAACH,OAAQ,WACxB,IAAIY,MAAMmG,EAAOhJ,KAAK8C,SAAS,IAtBrD,0DAyBYL,EAASJ,EAAW,KAAEa,aACtBT,EAASL,EAAY,CAACH,OAAQ,WA1B1C,0DAFJ,4DI3JE,CAACQ,EAASqD,EAAM1B,KAAKd,GAAGwC,EAAMtF,aAChC,OAAO,oCAGC,6BAAK,kBAAC6I,GAAA,EAAD,CAAUnC,MAAO,UACPR,SAAUyC,EACVC,QAA6B,IAApBtD,EAAM1B,KAAKnC,SAC/B,kBAAC,GAAD,CACI3B,MAAOwF,EAAM1B,KAAK9D,MAClBuH,gBAAiBS,EACjBrG,OAAQ6D,EAAM1B,KAAKnC,SAGvB,8BAAM,kBAACqH,GAAA,EAAD,CAAYjC,QAASa,EAAYtF,SAAUkD,EAAM1B,KAAKH,gBAAgB,kBAAC,KAAD,aCpB/EsF,GAA+B3D,IAAMC,MAAM,YAAiB,IAAf1C,EAAc,EAAdA,SAEhDwB,EAAQ6E,aAA+C,SAAA7H,GAAK,OAAIA,EAAMgD,SAEtEnD,EAASgI,aAAuC,SAAA7H,GAAK,OAAIA,EAAMyD,MAAM5D,UAErEiB,EAAWwF,cACjBwB,qBAAU,WL2CW,IAACpF,EK1ClB5B,GL0CkB4B,EK1CClB,EAASG,GL0CX,uCAErB,WAAOb,GAAP,eAAA+F,EAAA,6DAEI/F,EAASL,EAAY,CAACH,OAAQ,aAFlC,SAGuB9B,EAAOU,SAASwD,GAHvC,UAGQ2E,EAHR,gBAKaA,EAAOhJ,KAAKkC,MALzB,iBAMYO,EAASiC,EAAW,CAACL,aAAYM,MAAOqE,EAAOhJ,KAAK0J,SAEpDjH,EAASL,EAAY,CAACH,OAAQ,eAR1C,8BAWkB,IAAIY,MAAM,cAX5B,0DAgBQJ,EAASL,EAAY,CAACH,OAAQ,WAC9BQ,EAASJ,EAAW,EAAD,KAjB3B,0DAFqB,0DKxCnB,CAACI,EAASU,EAASG,GAAG9B,IAGxB,IAAImI,EAAahF,EAAMxB,EAASG,IAER,WAApBH,EAASO,SAETiG,EAAahF,EAAMxB,EAASG,IAAII,QAAO,SAACkG,GAAD,OAAqBA,EAAE3H,SAAW/C,EAAe2K,QAEpE,cAApB1G,EAASO,SACTiG,EAAahF,EAAMxB,EAASG,IAAII,QAAO,SAAAkG,GAAC,OAAIA,EAAE3H,SAAW/C,EAAe6I,cAG5E,IAAM+B,EAAkB3B,uBAAY,WAChC1F,EAASsB,EAAuB,CAACT,GAAGH,EAASG,GAAGI,OAAO,WACzD,CAACjB,EAASU,EAASG,KACfyG,EAAqB5B,uBAAY,WACnC1F,EAASsB,EAAuB,CAACT,GAAGH,EAASG,GAAGI,OAAO,cAEzD,CAACjB,EAASU,EAASG,KACf0G,EAAwB7B,uBAAY,WACtC1F,EAASsB,EAAuB,CAACT,GAAGH,EAASG,GAAGI,OAAO,iBAEzD,CAACjB,EAASU,EAASG,KACf2G,EAAU9B,uBAAY,SAAC7H,GACzBmC,EL0CiB,SAAC4B,EAAoB/D,GAArB,8CAErB,WAAOmC,GAAP,eAAA+F,EAAA,sEAEQ/F,EAASL,EAAY,CAACH,OAAQ,aAFtC,SAGyB9B,EAAOW,WAAWuD,EAAY/D,GAHvD,UAIqC,KADzB8D,EAHZ,QAIiBpE,KAAK0C,WAJtB,iBAKYD,EAAS6B,EAAU,CAACF,KAAMA,EAAKpE,KAAKA,KAAKiJ,QACzCxG,EAASL,EAAY,CAACH,OAAQ,eAN1C,8BAQYQ,EAASL,EAAY,CAACH,OAAQ,WACxB,IAAIY,MAAMuB,EAAKpE,KAAK8C,SAAS,IAT/C,0DAaQL,EAASJ,EAAW,KAAEa,aACtBT,EAASL,EAAY,CAACH,OAAQ,WAdtC,0DAFqB,sDK1CRiI,CAAU/G,EAASG,GAAGhD,MACjC,CAACmC,EAASU,EAASG,KACf6G,EAAkBhC,uBAAY,SAAC7H,GACjCmC,EN6DwB,SAACjC,EAAoBF,GAArB,8CAC5B,WAAOmC,GAAP,eAAA+F,EAAA,sEAEQ/F,EAASL,EAAY,CAACH,OAAQ,aAFtC,SAG2B9B,EAAOM,eAAeD,EAAYF,GAH7D,UAIuC,KAD3B0I,EAHZ,QAImBhJ,KAAK0C,WAJxB,iBAKYD,EAASL,EAAY,CAACH,OAAQ,eAC9BQ,EAASmB,EAAiB,CAACpD,aAAWF,WANlD,8BAQYmC,EAASL,EAAY,CAACH,OAAQ,WACxB,IAAIY,MAAMmG,EAAOhJ,KAAK8C,SAAS,IATjD,0DAYQL,EAASL,EAAY,CAACH,OAAQ,WAC9BQ,EAASJ,EAAW,KAAEa,aAb9B,0DAD4B,sDM7DfkH,CAAiBjH,EAASG,GAAIhD,MACzC,CAACmC,EAASU,EAASG,KAGrB,OAAQ,6BACJ,6BAEI,yBAAKkD,UAAW6D,KAAEnK,QAAS,kBAACoJ,GAAA,EAAD,CACvB1G,SAAUO,EAASc,eACnBoD,QAAS,kBAAM5E,GNuCEjC,EMvCwB2C,EAASG,GNuClC,uCAC5B,WAAOb,GAAP,eAAA+F,EAAA,sEAEQ/F,EAASL,EAAY,CAACH,OAAQ,aAC9BQ,EAASE,EAAkB,CAACnC,aAAWoC,UAAS,KAHxD,SAI2BzC,EAAOI,eAAeC,GAJjD,OAIYwI,EAJZ,OAKQxG,EAAiBwG,EAAOhJ,KAAMQ,EAAYiC,GALlD,gDAOQO,EAAqB,EAAD,GAAIP,EAAUjC,GAP1C,yDAD4B,4DAACA,IMvCuC,kBAAC,KAAD,QAE5D,wBAAIgG,UAAW6D,KAAEC,KAAMC,MAAO,CAACC,UAAW,WACtC,kBAAC,GAAD,CACIlK,MAAO6C,EAAS7C,MAChBuH,gBAAiBsC,KAKzB,kBAAC,GAAD,CAAa9D,SAAU4D,EAAShD,eAAgB9D,EAASc,iBAExD0F,EAAW9F,KAAI,SAAC4G,GAEf,OAAQ,kBAAC,GAAD,CAAMjK,WAAY2C,EAASG,GAAIc,KAAMqG,EAC9B3D,IAAK2D,EAAEnH,QAIxB,6BACI,kBAAC0D,GAAA,EAAD,CAAQI,KAAM,QAASF,MAAO,UAAWC,QAA6B,QAApBhE,EAASO,OAAmB,WAAa,OACnF2D,QAASyC,GADjB,OAGA,kBAAC9C,GAAA,EAAD,CAAQE,MAAO,UAAWE,KAAM,QAASD,QAA6B,WAApBhE,EAASO,OAAsB,WAAa,OACtF2D,QAAS0C,GADjB,UAGA,kBAAC/C,GAAA,EAAD,CAAQE,MAAO,YAAaE,KAAM,QAASD,QAA6B,cAApBhE,EAASO,OAAyB,WAAa,OAC3F2D,QAAS2C,GADjB,mBCvEOU,GAjBL,WACd,IAAM1G,EAAYwF,aAA0D,SAAA7H,GAAK,OAAIA,EAAMqC,aAG3F,OAAO,oCAEFA,EAAUH,KAAI,SAAC8G,GAEZ,OAAO,kBAACC,GAAA,EAAD,CAAML,MAAO,CAACM,QAAS,QAAS/D,IAAK6D,EAAYrH,GAAI2F,MAAI,EAAC6B,GAAI,GACjE,kBAACC,GAAA,EAAD,CAAOC,UAAW,EAAGT,MAAO,CAACM,QAAS,SAClC,kBAACtB,GAAD,CAAUpG,SAAUwH,W,oBCVxC,SAASM,GAAMnF,GACX,OAAO,kBAAC,KAAD,eAAUkF,UAAW,EAAG7D,QAAQ,UAAarB,IAIzC,SAASoF,KAErB,IAAMhJ,EAAQsH,aAA0C,SAAA7H,GAAK,OAAIA,EAAMwD,IAAIjD,SACpEO,EAAWwF,cACXkD,EAAc,SAACxE,EAA8ByE,GAChC,cAAXA,GAIJ3I,EAASJ,EAAW,CAACH,MAAM,SAI/B,OACQ,kBAACmJ,GAAA,EAAD,CAAUC,KAAc,OAARpJ,EAAcqJ,iBAAkB,IAAMC,QAASL,GAC3D,kBAAC,GAAD,CAAOK,QAASL,EAAaM,SAAS,SACjCvJ,I,+DChBRwJ,GAAQ,WACjB,IAAMjJ,EAAWwF,cACXzG,EAASgI,aAAuC,SAAA7H,GAAK,OAAIA,EAAMyD,MAAM5D,UACrEmK,EAASC,aAAU,CACtBC,SAAS,SAACC,GACL,OAAIA,EAAOpM,MAKRoM,EAAOnM,SAKRmM,EAAOnM,SAASoM,OAAO,EAChB,CACFpM,SAAS,kCAFjB,EAJW,CACHA,SAAS,wBANL,CACHD,MAAM,sBAclBsM,cAAe,CACXtM,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBqM,SAAU,SAAAH,GACNrJ,EZfe,SAACqJ,GAAD,8CAA6B,WAAOrJ,GAAP,eAAA+F,EAAA,sEAEhD/F,EAASL,EAAY,CAACH,OAAO,aAFmB,SAG7BxC,EAAgBqM,EAAOpM,MAAOoM,EAAOnM,SAAUmM,EAAOlM,YAHzB,OAItB,KADtBoJ,EAH4C,QAIrCtG,YACPD,EAASL,EAAY,CAACH,OAAO,eAC7BQ,EAASf,EAAY,CAACF,QAAQ,OAE9BiB,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,CAACH,MAAM8G,EAAOlG,SAAS,OATC,gDAYhDL,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,KAAEa,aAb0B,yDAA7B,sDYeNgJ,CAAYJ,IACrBK,QAAQC,IAAIN,MAGxB,OAAGtK,EACS,kBAAC,KAAD,CAAU6K,GAAI,cAEf,kBAACzB,GAAA,EAAD,CAAM0B,WAAS,EAACC,QAAQ,UAC3B,kBAAC3B,GAAA,EAAD,CAAM3B,MAAI,EAAC6B,GAAI,GACX,0BAAMmB,SAAUN,EAAOa,cACvB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KAMI,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACrG,GAAA,EAAD,eACIC,MAAM,QACNqG,OAAO,UACHjB,EAAOkB,cAAc,WAE5BlB,EAAOmB,QAAQpN,OAAOiM,EAAOoB,OAAOrN,MAAM,yBAAK6K,MAAO,CAACrD,MAAM,QAASyE,EAAOoB,OAAOrN,OAAa,KAElG,kBAAC4G,GAAA,EAAD,eACI0G,KAAK,WACLzG,MAAM,WACNqG,OAAO,UACHjB,EAAOkB,cAAc,cAG5BlB,EAAOmB,QAAQpN,OAAOiM,EAAOoB,OAAOpN,SAAS,yBAAK4K,MAAO,CAACrD,MAAM,QAASyE,EAAOoB,OAAOpN,UAAgB,KAExG,kBAACsN,GAAA,EAAD,eACI1G,MAAO,cACP2G,QAAS,kBAAC7D,GAAA,EAAD,OACLsC,EAAOkB,cAAc,gBAG7B,kBAAC7F,GAAA,EAAD,CAAQgG,KAAM,SAAU7F,QAAS,YAAaD,MAAO,WAArD,eCvDdiG,GAAevH,IAAMC,MAAK,WAC5B,IAAMpD,EAAWwF,cACXhG,EAASuH,aAAyC,SAAA7H,GAAK,OAAIA,EAAMwD,IAAIlD,UACrEE,EAAYqH,aAAsC,SAAA7H,GAAK,OAAIA,EAAMwD,IAAIhD,aACrEX,EAASgI,aAAuC,SAAA7H,GAAK,OAAIA,EAAMyD,MAAM5D,UAErE4L,EAAcjF,uBAAY,SAACkF,GVqDR,IAAC/M,EUpDtBmC,GVoDsBnC,EUpDC+M,EVoDF,uCACzB,WAAO5K,GAAP,eAAA+F,EAAA,sEAEQ/F,EAASL,EAAY,CAACH,OAAQ,aAFtC,SAG2B9B,EAAOE,YAAYC,GAH9C,UAIuC,KAD3B0I,EAHZ,QAImBhJ,KAAK0C,WAJxB,iBAKYD,EAASe,EAAc,CAACL,SAAS6F,EAAOhJ,KAAKA,KAAKiJ,QAClDxG,EAASL,EAAY,CAACH,OAAQ,eAN1C,8BASYQ,EAASL,EAAY,CAACH,OAAQ,WACxB,IAAIY,MAAMmG,EAAOhJ,KAAK8C,SAAS,IAVjD,0DAeQL,EAASL,EAAY,CAACH,OAAQ,WAC9BQ,EAASJ,EAAW,KAAEa,aAhB9B,0DADyB,0DUnDtB,CAACT,IAQJ,OANAgH,qBAAU,WACNhH,EZPmB,uCAAM,WAAOA,GAAP,eAAA+F,EAAA,sEAEzB/F,EAASL,EAAY,CAACH,OAAO,aAFJ,SAGNxC,IAHM,OAIC,KADtBuJ,EAHqB,QAIdtG,YACPD,EAASL,EAAY,CAACH,OAAO,eAC7BQ,EAASf,EAAY,CAACF,QAAQ,OAE9BiB,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,CAACH,MAAM8G,EAAOlG,SAAS,OAE/CL,EAASH,EAAe,CAACH,WAAU,KAXV,gDAazBM,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,KAAEa,aACtBT,EAASH,EAAe,CAACH,WAAU,KAfV,yDAAN,uDYQnBM,EVuCsB,uCAC1B,WAAOA,GAAP,eAAA+F,EAAA,6DACI/F,EAASL,EAAY,CAACH,OAAQ,aADlC,SAE0B9B,EAAOC,eAFjC,OAEQ4D,EAFR,OAGIvB,EAASpC,EAAY,CAAC2D,eACtBvB,EAASL,EAAY,CAACH,OAAQ,eAJlC,2CAD0B,yDUrCvB,CAACQ,EAASjB,IAETW,EAOA,6BAEI,kBAACmL,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KACI,kBAAClE,GAAA,EAAD,CAAYmE,KAAK,QAAQvG,MAAM,UAAUwG,aAAW,QAChD,kBAACC,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CAAYzG,QAAQ,MAApB,QAGC3F,EAAQ,kBAACwF,GAAA,EAAD,CAAQK,QAAS,WAAK5E,EbnB3B,uCAAM,WAAOA,GAAP,eAAA+F,EAAA,sEAEtB/F,EAASL,EAAY,CAACH,OAAO,aAFP,SAGHxC,IAHG,OAII,KADtBuJ,EAHkB,QAIXtG,YACPD,EAASL,EAAY,CAACH,OAAO,eAC7BQ,EAASf,EAAY,CAACF,QAAQ,OAE9BiB,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,CAACH,MAAM8G,EAAOlG,SAAS,OATzB,gDAYtBL,EAASL,EAAY,CAACH,OAAO,WAC7BQ,EAASJ,EAAW,KAAEa,aAbA,yDAAN,wDamBkDgE,MAAM,WAAnD,WAA+E,OAKtF,YAATjF,EAAmB,kBAAC4L,GAAA,EAAD,MAAmB,GACvC,kBAACC,GAAA,EAAD,KACI,kBAAClD,GAAA,EAAD,CAAM0B,WAAS,GAAf,IAAiB,kBAAC,GAAD,CAAajG,SAAU+G,KACxC,kBAACxC,GAAA,EAAD,CAAM0B,WAAS,GACT9K,EAAkC,kBAAC,GAAD,MAA3B,kBAAC,KAAD,CAAU6K,GAAI,WACvB,kBAAC,KAAD,CAAQ0B,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAI,kBAACd,GAAD,SACrC,kBAAC,KAAD,CAAQa,KAAM,SAAUC,OAAQ,kBAAI,kBAAC,GAAD,UAGxC,kBAAC/C,GAAD,QA9BF,yBAAKX,MAAO,CAACgD,SAAS,QAAQW,IAAI,MAAO1D,UAAU,SAAS2D,MAAM,SACpE,kBAACC,GAAA,EAAD,UAuCGjB,M,SC3EfkB,IAASJ,OAAO,kBAAC,IAAD,CAAU5I,MAAOA,IAC7B,kBAAC,KAAD,KACI,kBAAC,GAAD,QAGKiJ,SAASC,eAAe,ShB4H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5O,MAAK,SAAA6O,GACJA,EAAaC,gBAEdvG,OAAM,SAAAnG,GACLiK,QAAQjK,MAAMA,EAAM2M,a,mBiBhJ5BC,EAAOC,QAAU,CAAC,OAAS,yBAAyB,KAAO,0B","file":"static/js/main.13d2adb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c9a11d0b-1bf4-4a0d-8b85-3f35229d5cc6'\r\n    }\r\n})\r\n\r\nexport enum PriorityType {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum TypeStatusTask {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport type TypeTodolist = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TypeData = {\r\n    item: TypeTodolist\r\n}\r\nexport type TypeResponseDeleteAndUpdate<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TypeTaskItems = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}&{disabledStatus:boolean}\r\nexport type TypeResponseTask = {\r\n    items: Array<TypeTaskItems>\r\n    totalCount: number\r\n    error: boolean\r\n}\r\nexport type PropertiesType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype TypeIsAuth = {\r\n        id: number\r\n        email:string\r\n        login: string\r\n}\r\n\r\nexport const getIsAuth = {\r\n    login:(email: string,password:string,rememberMe:boolean)=>{\r\n        return instance.post<TypeResponseDeleteAndUpdate<{userId: number}>>('/auth/login',{email,password,rememberMe}).then(response => {\r\n            return  response.data\r\n        })\r\n    },\r\n    getInitialApp :()=>{\r\n        return instance.get<TypeResponseDeleteAndUpdate<TypeIsAuth>>('/auth/me').then(response=>{\r\n            return  response.data\r\n        })\r\n    },\r\n    logout :()=>{\r\n        return instance.delete<TypeResponseDeleteAndUpdate>('/auth/login').then(response => {\r\n            return response.data\r\n        })\r\n\r\n    }\r\n}\r\nconst GetApi = {\r\n    getTodoLists: () => {\r\n        return instance.get<Array<TypeTodolist>>('todo-lists').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    setTodolist: (title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<TypeData>>(`todo-lists`, {title})\r\n    },\r\n    removeTodolist: (todolistId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist: (todolistId: string, title: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    reorderTodolist: (todolistId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/reorder`, {putAfterItemId})\r\n    },\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<TypeResponseTask>(`todo-lists/${todolistId}/tasks?count=10&page=1`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/tasks/${taskId}`,)\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: PropertiesType) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`/todo-lists/${todolistId}/tasks/${taskId}`,\r\n\r\n            model\r\n        )\r\n    },\r\n    reorderTask: (todolistId: string, taskId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<TypeData>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {\r\n            putAfterItemId,\r\n        })\r\n    }\r\n}\r\nexport default GetApi;","import {Dispatch} from \"redux\";\r\nimport {TypeFormikError} from \"../login/login\";\r\nimport {getIsAuth} from \"../dall/todolists-api\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { setStatusAC, setErrorAC } from \"../app/appReducer\";\r\n\r\nconst initialState = {\r\n    isAuth: false\r\n}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'login',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsAuthAC(state, action: PayloadAction<{ isAuth: boolean }>) {\r\n            state.isAuth = action.payload.isAuth\r\n        }\r\n    }\r\n})\r\nconst LoginReducer = slice.reducer;\r\nexport const {setIsAuthAC} = slice.actions;\r\n\r\n\r\nexport const getIsAuthTC = (values: TypeFormikError) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setStatusAC({status:'loading'}))\r\n        let result = await getIsAuth.login(values.email, values.password, values.rememberMe)\r\n        if (result.resultCode === 0) {\r\n            dispatch(setStatusAC({status:'succeeded'}))\r\n            dispatch(setIsAuthAC({isAuth: true}))\r\n        } else {\r\n            dispatch(setStatusAC({status:'error'}))\r\n            dispatch(setErrorAC({error:result.messages[0]}))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setStatusAC({status:'error'}))\r\n        dispatch(setErrorAC(e.toString()))\r\n\r\n    }\r\n\r\n}\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setStatusAC({status:'loading'}))\r\n        let result = await getIsAuth.logout()\r\n        if (result.resultCode === 0) {\r\n            dispatch(setStatusAC({status:'succeeded'}))\r\n            dispatch(setIsAuthAC({isAuth: false}))\r\n        } else {\r\n            dispatch(setStatusAC({status:'error'}))\r\n            dispatch(setErrorAC({error:result.messages[0]}))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setStatusAC({status:'error'}))\r\n        dispatch(setErrorAC(e.toString()))\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LoginReducer;","import {Dispatch} from \"redux\";\r\nimport {getIsAuth} from \"../dall/todolists-api\";\r\nimport {setIsAuthAC} from \"../state/loginReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TypeInitialSate = {\r\n    status: \"free\",\r\n    error: null,\r\n    isInitial: false\r\n\r\n\r\n}\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setStatusAC(state, action: PayloadAction<{ status: TypeStatus }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialAC(state, action: PayloadAction<{ isInitial: boolean }>) {\r\n            state.isInitial = action.payload.isInitial\r\n\r\n        },\r\n    }\r\n\r\n})\r\n\r\nconst AppReducer = slice.reducer;\r\nexport const {setStatusAC,setErrorAC,setIsInitialAC} = slice.actions;\r\nexport const isInitialTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setStatusAC({status:'loading'}))\r\n        let result = await getIsAuth.getInitialApp()\r\n        if (result.resultCode === 0) {\r\n            dispatch(setStatusAC({status:'succeeded'}))\r\n            dispatch(setIsAuthAC({isAuth: true}))\r\n        } else {\r\n            dispatch(setStatusAC({status:'error'}))\r\n            dispatch(setErrorAC({error:result.messages[0]}))\r\n        }\r\n        dispatch(setIsInitialAC({isInitial:true}))\r\n    } catch (e) {\r\n        dispatch(setStatusAC({status:'error'}))\r\n        dispatch(setErrorAC(e.toString()))\r\n        dispatch(setIsInitialAC({isInitial:true}))\r\n\r\n    }\r\n}\r\n\r\ntype TypeInitialSate = {\r\n    status: TypeStatus\r\n    error: string | null\r\n    isInitial: boolean\r\n}\r\nexport type TypeStatus = 'free' | 'loading' | 'error' | 'succeeded';\r\nexport default AppReducer;\r\n\r\n\r\n","import {setErrorAC, setStatusAC} from \"../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RemoveTodolistAC,setStatusDisabled} from \"../state/todolistReducer\";\r\n\r\nexport const functionErrorApi =\r\n    (data:any,todolistId:string, dispatch:Dispatch)=>{\r\n        if (data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC({todolistId}))\r\n            dispatch(setStatusAC({status:'succeeded'}))\r\n            dispatch(setStatusDisabled({todolistId,disabled:false}))\r\n        } else {\r\n            dispatch(setStatusAC({status:'error'}))\r\n            dispatch(setStatusDisabled({todolistId,disabled:false}))\r\n            throw  new Error(data.messages[0])\r\n\r\n        }\r\n\r\n}\r\n\r\nexport const functionErrorNetwork=(e:any,dispatch:Dispatch,todolistId:string)=>{\r\n    dispatch(setErrorAC(e.toString()))\r\n    dispatch(setStatusDisabled({todolistId,disabled:false}))\r\n    dispatch(setStatusAC({status:'error'}))\r\n\r\n\r\n}","import {TypeFilter} from \"../app/AppWithRedux\";\r\nimport GetApi, {TypeTodolist} from \"../dall/todolists-api\";\r\nimport {setErrorAC, setStatusAC} from \"../app/appReducer\";\r\nimport {functionErrorApi, functionErrorNetwork} from \"../components/functionErrorApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: Array<TypeTodolistReducer> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        RemoveTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            let todolist = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state.splice(todolist, 1)\r\n        },\r\n        AddTodolistAC(state, action: PayloadAction<{ todolist: TypeTodolist }>) {\r\n            let newTodolist: any = action.payload.todolist;\r\n            newTodolist.filter = 'all';\r\n            state.unshift(newTodolist)\r\n\r\n\r\n        },\r\n        ChangeTodolistAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n             state.map((td )=> {\r\n                   if (td.id === action.payload.todolistId) {\r\n                      td.title = action.payload.title\r\n                }\r\n                   return td\r\n            })\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: TypeFilter }>) {\r\n            state.map(td => {\r\n                if (td.id === action.payload.id) {\r\n                    td.filter = action.payload.filter\r\n                }\r\n                return td\r\n            })\r\n        },\r\n        setTodolist(state, action: PayloadAction<{ todolists: Array<TypeTodolist> }>) {\r\n\r\n           return  state = action.payload.todolists.map(td => {\r\n                return {\r\n                    ...td,\r\n                    filter:\"all\",\r\n                    disabledStatus:false\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        setStatusDisabled(state, action: PayloadAction<{ todolistId: string, disabled: boolean }>) {\r\n            state.map(td => {\r\n                    if (td.id === action.payload.todolistId) {\r\n                        td.disabledStatus = action.payload.disabled\r\n                    }\r\n                return td\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n})\r\n\r\nexport const {\r\n    RemoveTodolistAC,\r\n    AddTodolistAC,\r\n    ChangeTodolistAC,\r\n    changeTodolistFilterAC,\r\n    setTodolist,\r\n    setStatusDisabled\r\n} = slice.actions;\r\n\r\n\r\nexport const TodolistReducer = slice.reducer;\r\n\r\n\r\nexport const getTodolistsTC = () =>\r\n    async (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        let todolists = await GetApi.getTodoLists()\r\n        dispatch(setTodolist({todolists}))\r\n        dispatch(setStatusAC({status: 'succeeded'}))\r\n\r\n    }\r\nexport const addTodolistTC = (title: string) =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status: 'loading'}))\r\n            let result = await GetApi.setTodolist(title)\r\n            if (result.data.resultCode === 0) {\r\n                dispatch(AddTodolistAC({todolist:result.data.data.item}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n\r\n            } else {\r\n                dispatch(setStatusAC({status: 'error'}))\r\n                throw new Error(result.data.messages[0])\r\n\r\n\r\n            }\r\n        } catch (e) {\r\n            dispatch(setStatusAC({status: 'error'}))\r\n            dispatch(setErrorAC(e.toString()))\r\n        }\r\n\r\n    }\r\nexport const removeTodolistTC = (todolistId: string) =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status: 'loading'}))\r\n            dispatch(setStatusDisabled({todolistId,disabled:true}))\r\n            let result = await GetApi.removeTodolist(todolistId)\r\n            functionErrorApi(result.data, todolistId, dispatch)\r\n        } catch (e) {\r\n            functionErrorNetwork(e, dispatch, todolistId)\r\n\r\n        }\r\n\r\n    }\r\nexport const updateTodolistTC = (todolistId: string, title: string) =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status: 'loading'}))\r\n            let result = await GetApi.updateTodolist(todolistId, title)\r\n            if (result.data.resultCode === 0) {\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n                dispatch(ChangeTodolistAC({todolistId,title}))\r\n            } else {\r\n                dispatch(setStatusAC({status: 'error'}))\r\n                throw new Error(result.data.messages[0])\r\n            }\r\n        } catch (e) {\r\n            dispatch(setStatusAC({status: 'error'}))\r\n            dispatch(setErrorAC(e.toString()))\r\n\r\n        }\r\n    }\r\n\r\nexport type TypeTodolistReducer = TypeTodolist & { filter: TypeFilter, disabledStatus: boolean }\r\n","import GetApi, {PropertiesType, TypeStatusTask, TypeTaskItems} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setErrorAC, setStatusAC} from \"../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AddTodolistAC, RemoveTodolistAC,setTodolist} from \"./todolistReducer\";\r\n\r\nexport type TypeTaskReducer = {\r\n    [key: string]: TypeTaskItems[]\r\n}\r\nlet initialState: TypeTaskReducer = {\r\n}\r\nconst slice = createSlice({\r\n    name: 'task',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todoListId: string }>) {\r\n            let task = state[action.payload.todoListId].findIndex(task => task.id === action.payload.taskId)\r\n            state[action.payload.todoListId].splice(task, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TypeTaskItems }>) {\r\n            state[action.payload.task.todoListId].push(action.payload.task)\r\n        },\r\n        changeTaskAC(state, action: PayloadAction<{ task: TypeTaskItems }>) {\r\n            state[action.payload.task.todoListId].map(task => {\r\n                if (task.id === action.payload.task.id) {\r\n                    task.title = action.payload.task.title\r\n                    task.status = action.payload.task.status\r\n                }\r\n                return task;\r\n            })\r\n        },\r\n        changeTaskDisabledAC(state, action: PayloadAction<{ taskId: string, todoListId: string, disabled: boolean }>) {\r\n            state[action.payload.todoListId].map(task => {\r\n                if (task.id === action.payload.taskId) {\r\n                    task.disabledStatus = action.payload.disabled\r\n                }\r\n                return task;\r\n            })\r\n        },\r\n        getTasksAC(state, action: PayloadAction<{ todoListId: string, tasks: Array<TypeTaskItems> }>) {\r\n\r\n            state[action.payload.todoListId] = action.payload.tasks\r\n\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(AddTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = [];\r\n            })\r\n        builder.addCase(RemoveTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n\r\n        builder.addCase(setTodolist, (state, action) => {\r\n            action.payload.todolists.forEach(td => {\r\n                state[td.id]=[]\r\n\r\n            })\r\n\r\n\r\n        })\r\n    }})\r\n\r\n\r\nexport const taskReducer = slice.reducer;\r\nexport const {removeTaskAC, addTaskAC, changeTaskAC, changeTaskDisabledAC, getTasksAC} = slice.actions;\r\n\r\n\r\nexport const getTaskTC = (todoListId: string) =>\r\n\r\n    async (dispatch: Dispatch) => {\r\n        debugger\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        let result = await GetApi.getTasks(todoListId)\r\n        try {\r\n            if (!result.data.error) {\r\n                dispatch(getTasksAC({todoListId, tasks: result.data.items}))\r\n                debugger\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                debugger\r\n                throw new Error(\"Some Error\")\r\n            }\r\n\r\n        } catch (e) {\r\n            debugger\r\n            dispatch(setStatusAC({status: 'error'}))\r\n            dispatch(setErrorAC(e))\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string): ThunkAction<void,\r\n    AppRootStateType, unknown, ActionType> =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status: 'loading'}))\r\n            let task = await GetApi.createTask(todoListId, title)\r\n            if (task.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: task.data.data.item}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setStatusAC({status: 'error'}))\r\n                throw new Error(task.data.messages[0])\r\n\r\n            }\r\n        } catch (e) {\r\n            dispatch(setErrorAC(e.toString()))\r\n            dispatch(setStatusAC({status: 'error'}))\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string): ThunkAction<void, AppRootStateType,\r\n    unknown, ActionType> =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskDisabledAC({taskId, todoListId, disabled: true}))\r\n        GetApi.deleteTask(todoListId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC({taskId, todoListId}))\r\n                    dispatch(setStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskDisabledAC({taskId, todoListId, disabled: false}))\r\n\r\n                } else {\r\n                    dispatch(setStatusAC({status: 'error'}))\r\n                    dispatch(changeTaskDisabledAC({taskId, todoListId, disabled: false}))\r\n                    throw new Error(res.data.messages[0])\r\n                }\r\n            })\r\n            .catch(e => {\r\n                dispatch(setErrorAC(e.toString()))\r\n                dispatch(setStatusAC({status: 'error'}))\r\n\r\n            })\r\n    }\r\n\r\nexport const updateTaskTitleTC = (todoListId: string, taskId: string, title: string):\r\n    ThunkAction<void,\r\n        AppRootStateType, unknown, ActionType> =>\r\n\r\n    async (dispatch: Dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n            }\r\n            try {\r\n                dispatch(setStatusAC({status: 'loading'}))\r\n                let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n                if (result.data.resultCode === 0) {\r\n                    dispatch(changeTaskAC({task: result.data.data.item}))\r\n                    dispatch(setStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    dispatch(setStatusAC({status: 'error'}))\r\n                    throw new Error(result.data.messages[0])\r\n                }\r\n            } catch (e) {\r\n                dispatch(setErrorAC(e.toString()))\r\n                dispatch(setStatusAC({status: 'error'}))\r\n\r\n            }\r\n        }\r\n\r\n    }\r\nexport const updateTaskStatusTC =\r\n    (todoListId: string, taskId: string, status: TypeStatusTask):\r\n        ThunkAction<void, AppRootStateType, unknown, ActionType> =>\r\n        async (dispatch: Dispatch, getState) => {\r\n            const tasks = getState().tasks\r\n            const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n            if (task) {\r\n                const model: PropertiesType = {\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    completed: task.completed,\r\n                    status: status,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    deadline: task.deadline,\r\n                }\r\n                try {\r\n                    dispatch(setStatusAC({status: 'loading'}))\r\n                    let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n                    if (result.data.resultCode === 0) {\r\n                        dispatch(changeTaskAC({task: result.data.data.item}))\r\n                        dispatch(setStatusAC({status: 'succeeded'}))\r\n                    } else {\r\n                        dispatch(setStatusAC({status: 'error'}))\r\n                        throw new Error(result.data.messages[0])\r\n                    }\r\n                } catch (e) {\r\n                    dispatch(setErrorAC(e.toString()))\r\n                    dispatch(setStatusAC({status: 'error'}))\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\nexport type TypeTaskDisabledButton = ReturnType<typeof changeTaskDisabledAC>\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskAC>\r\n    | ReturnType<typeof getTasksAC>\r\n    | TypeTaskDisabledButton\r\n\r\n\r\n//\r\n// export function taskReducer(state: TypeTaskReducer = initialState, action: ActionType): TypeTaskReducer {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TASK': {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todoListId]: [...state[action.todoListId].filter((task: TypeTaskItems) => task.id !== action.taskId)]\r\n//             }\r\n//         }\r\n//\r\n//         case 'ADD-TASK': {\r\n//             return {\r\n//                 ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n//             }\r\n//\r\n//         }\r\n//\r\n//         case \"CHANGE_TASK\": {\r\n//             const copyState = {...state}\r\n//             let result = copyState[action.task.todoListId].map(ts => {\r\n//                 if (ts.id === action.task.id) {\r\n//                     ts = action.task\r\n//                     return ts\r\n//                 }\r\n//                 return ts\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 [action.task.todoListId]: result\r\n//             }\r\n//         }\r\n//         case \"CHANGE_DISABLED\":{\r\n//             const copyState = {...state}\r\n//             let result = copyState[action.todoListId].map(ts => {\r\n//                 if (ts.id === action.taskId) {\r\n//                     ts.disabledStatus = action.disabled\r\n//                     return ts\r\n//                 }\r\n//                 return ts\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todoListId]: result\r\n//             }\r\n//         }\r\n//\r\n//\r\n//         case 'ADD-TODOLIST': {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolist.id]: []\r\n//             }\r\n//         }\r\n//\r\n//         case 'REMOVE-TODOLIST': {\r\n//             return {\r\n//                 delete: state[action.id],\r\n//                 ...state\r\n//\r\n//             }\r\n//         }\r\n//\r\n//\r\n//         case \"todolist_reducer/SET_TODOLISTS\": {\r\n//             let copyState = {...state}\r\n//             action.todolists.forEach(td => {\r\n//                 copyState[td.id] = []\r\n//             })\r\n//             return copyState;\r\n//         }\r\n//         case \"GET-TASKS\": {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todoListId]: action.tasks.map(task => task)\r\n//             }\r\n//         }\r\n//\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n","import {taskReducer} from './taskReducer';\r\nimport {TodolistReducer} from './todolistReducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport AppReducer from \"../app/appReducer\";\r\nimport LoginReducer from \"./loginReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: TodolistReducer,\r\n    app:AppReducer,\r\n    login:LoginReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer,applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n    disabledButton?: boolean\r\n}\r\n\r\nconst AddItemForm = React.memo((props: TypeAddItemProps) =>{\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        if(error){\r\n            setError(null)\r\n\r\n        }\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button disabled={props.disabledButton} color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TypeStatusTask} from \"../dall/todolists-api\";\r\n\r\nexport type TypeEditSpan={\r\n    title:string\r\n    changeTaskTitle: ( title: string) => void\r\n    status?:TypeStatusTask\r\n\r\n\r\n}\r\n\r\nconst EditSpan = React.memo((props:TypeEditSpan)=>{\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{\r\n        setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n\r\n        editMode?<TextField value={text} size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span  onDoubleClick={onEditMode} className={(props.status===TypeStatusTask.Completed) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n})\r\nexport default EditSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport { removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../state/taskReducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TypeTaskItems} from \"../dall/todolists-api\";\r\n\r\nexport type TypePropsTask = {\r\n    task:TypeTaskItems\r\n    todolistId: string\r\n\r\n}\r\nconst Task =  React.memo((props:TypePropsTask)=>{\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback( () => {\r\n        dispatch(removeTaskTC(props.todolistId,props.task.id))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeTaskNew = useCallback((title: string) => {\r\n        dispatch(updateTaskTitleTC(props.todolistId,props.task.id, title))\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        dispatch(updateTaskStatusTC(props.todolistId,props.task.id,\r\n\r\n            e.currentTarget.checked?2:0, ))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    return <>\r\n\r\n\r\n            <div><Checkbox color={\"primary\"}\r\n                           onChange={changeStatus}\r\n                           checked={props.task.status===0?false:true}/>\r\n                <EditSpan\r\n                    title={props.task.title}\r\n                    changeTaskTitle={changeTaskNew}\r\n                    status={props.task.status}\r\n                />\r\n\r\n                <span><IconButton onClick={removeTask} disabled={props.task.disabledStatus}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n            </div>\r\n\r\n\r\n\r\n\r\n    </>\r\n\r\n})\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport s from './todolist.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    removeTodolistTC,\r\n    TypeTodolistReducer,\r\n    updateTodolistTC\r\n} from \"../state/todolistReducer\";\r\nimport {addTaskTC, getTaskTC, TypeTaskReducer} from \"../state/taskReducer\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport Task from \"../Tasks/tasks\";\r\nimport {TypeStatusTask, TypeTaskItems} from \"../dall/todolists-api\";\r\nimport {changeTodolistFilterAC,} from \"../state/todolistReducer\";\r\n\r\ntype PropsType = {\r\n    todolist:TypeTodolistReducer\r\n}\r\n\r\nexport const ToDoList:React.FC<PropsType> = React.memo( ({todolist}) => {\r\n\r\n    const tasks = useSelector<AppRootStateType, TypeTaskReducer>(state => state.tasks)\r\n\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(todolist.id))\r\n\r\n    },[dispatch,todolist.id,isAuth])\r\n\r\n\r\n    let resultTask = tasks[todolist.id];\r\ndebugger\r\n    if (todolist.filter === \"active\") {\r\n\r\n        resultTask = tasks[todolist.id].filter((t:TypeTaskItems) => t.status === TypeStatusTask.New)\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        resultTask = tasks[todolist.id].filter(t => t.status === TypeStatusTask.Completed)\r\n    }\r\n\r\n    const onAllKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC({id:todolist.id,filter:\"all\"}))\r\n    },[dispatch,todolist.id])\r\n    const onActiveKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC({id:todolist.id,filter:\"active\"}))\r\n\r\n    },[dispatch,todolist.id])\r\n    const onCompletedKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC({id:todolist.id,filter:\"completed\"}))\r\n\r\n    },[dispatch,todolist.id])\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(todolist.id,title))\r\n    },[dispatch,todolist.id])\r\n    const changeTodotitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTC(todolist.id, title))\r\n    },[dispatch,todolist.id])\r\n\r\n\r\n    return (<div>\r\n        <div>\r\n\r\n            <div className={s.delete} ><IconButton\r\n                disabled={todolist.disabledStatus}\r\n                onClick={() => dispatch(removeTodolistTC(todolist.id))}><DeleteForeverIcon/></IconButton></div>\r\n\r\n            <h3 className={s.test} style={{textAlign: 'center'}}>\r\n                <EditSpan\r\n                    title={todolist.title}\r\n                    changeTaskTitle={changeTodotitle}\r\n                />\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask} disabledButton={todolist.disabledStatus}/>\r\n\r\n            {resultTask.map((i: TypeTaskItems) => {\r\n\r\n              return  <Task todolistId={todolist.id} task={i}\r\n                             key={i.id}  />\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={todolist.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={todolist.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={todolist.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n})","import React from 'react';\r\nimport {TypeTodolistReducer} from \"../state/todolistReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {ToDoList} from \"../ToDoList/ToDoList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nconst Todolists = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TypeTodolistReducer>>(state => state.todolists)\r\n\r\n\r\n    return <>\r\n\r\n        {todolists.map((newToDoList: TypeTodolistReducer) => {\r\n\r\n            return <Grid style={{padding: '10px'}} key={newToDoList.id} item xs={3}>\r\n                <Paper elevation={5} style={{padding: '10px'}}>\r\n                    <ToDoList todolist={newToDoList} />\r\n\r\n\r\n                </Paper>\r\n            </Grid>\r\n        })}\r\n        </>}\r\n        export default Todolists","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setErrorAC} from '../app/appReducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport default function CustomizedSnackbars() {\r\n\r\n   const error = useSelector<AppRootStateType,string|null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setErrorAC({error:null}))\r\n\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={error!==null} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuthTC} from \"../state/loginReducer\";\r\nexport type TypeFormikError = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const formik = useFormik({\r\n       validate:(values:TypeFormikError)=>{\r\n            if(!values.email){\r\n                return {\r\n                    email:'Email is required'\r\n                }\r\n            }\r\n           if(!values.password){\r\n               return {\r\n                   password:'Password is required'\r\n               }\r\n           }\r\n           if(values.password.length<3){\r\n               return{\r\n                   password:'Must be more 3 characters'\r\n               }\r\n           }\r\n       },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getIsAuthTC(values))\r\n            console.log(values)\r\n        },\r\n    })\r\nif(isAuth){\r\n    return  <Redirect to={'/ToDoList'}/>\r\n}\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    {/*<p>To log in get registered*/}\r\n                    {/*    <a href={'https://social-network.samuraijs.com/'}*/}\r\n                    {/*       target={'_blank'}>here*/}\r\n                    {/*    </a>*/}\r\n                    {/*</p>*/}\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email&&formik.errors.email?<div style={{color:'red'}}>{formik.errors.email}</div>:null}\r\n\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n\r\n                    />\r\n                    {formik.touched.email&&formik.errors.password?<div style={{color:'red'}}>{formik.errors.password}</div>:null}\r\n\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox />}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTodolistTC, getTodolistsTC} from \"../state/todolistReducer\";\r\nimport Todolists from \"../todolists/todolists\";\r\nimport CustomizedSnackbars from \"../components/SnackBarError\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {isInitialTC, TypeStatus} from \"./appReducer\";\r\nimport {Login} from \"../login/login\";\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {logoutTC} from \"../state/loginReducer\";\r\n\r\nexport type TypeFilter = 'all' | 'active' | 'completed';\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType,TypeStatus>(state => state.app.status)\r\n    const isInitial = useSelector<AppRootStateType,boolean>(state => state.app.isInitial)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n\r\n    const addToDoList = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(isInitialTC())\r\n        dispatch(getTodolistsTC())\r\n\r\n    }, [dispatch,isAuth])\r\n\r\n    if(!isInitial){\r\n        return<div style={{position:'fixed',top:'50%' ,textAlign:'center',width:'100%'}}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n    return (\r\n\r\n        <div>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isAuth? <Button onClick={()=>{dispatch(logoutTC())}} color=\"inherit\">Log Out</Button>: null}\r\n\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status===\"loading\"?<LinearProgress />:\"\"}\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>\r\n                    {!isAuth?<Redirect to={'/login'}/>: <Todolists/>}\r\n                    <Route  exact path={'/'} render={()=><AppWithRedux/>}/>\r\n                    <Route  path={'/login'} render={()=><Login/>}/>\r\n\r\n                </Grid>\r\n                <CustomizedSnackbars/>\r\n\r\n\r\n            </Container>\r\n        </div>\r\n\r\n\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <BrowserRouter>\r\n        <AppWithRedux/>\r\n    </BrowserRouter>\r\n\r\n</Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\",\"test\":\"todolist_test__2Xzk0\"};"],"sourceRoot":""}