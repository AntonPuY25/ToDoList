{"version":3,"sources":["serviceWorker.ts","dall/todolists-api.tsx","app/appReducer.ts","state/taskReducer.ts","components/functionErrorApi.ts","state/todolistReducer.ts","state/store.ts","components/AddItemForm.tsx","components/editSpan.tsx","Tasks/tasks.tsx","ToDoList/ToDoList.tsx","todolists/todolists.tsx","components/SnackBarError.tsx","app/AppWithRedux.tsx","index.tsx","ToDoList/todolist.module.css"],"names":["Boolean","window","location","hostname","match","PriorityType","TypeStatusTask","instance","axios","create","baseURL","withCredentials","headers","GetApi","getTodoLists","get","then","response","data","setTodolist","title","post","removeTodolist","todolistId","delete","updateTodolist","put","reorderTodolist","putAfterItemId","getTasks","createTask","deleteTask","taskId","updateTask","model","reorderTask","initialState","status","error","setStatusAC","type","setErrorAC","AppReducer","state","action","addTaskAC","task","changeTaskAC","changeTaskDisabledAC","todoListId","disabled","getTasksAC","tasks","initilalState","functionErrorApi","dispatch","resultCode","setStatsuDesabled","Error","messages","RemoveTodolistAC","functionErrorNetwork","e","toString","id","ChangeToddolistAC","changeTodolistFilterAC","filter","rootReducer","combineReducers","copyState","result","map","ts","disabledStatus","todolist","todolists","forEach","td","tl","newTodolist","app","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","itemTitle","trim","addItems","TextField","label","className","value","onChange","event","currentTarget","onKeyPress","key","helperText","Button","disabledButton","color","variant","size","onClick","EditSpan","editMode","setEditMode","text","setText","autoFocus","onBlur","changeTaskTitle","onDoubleClick","Completed","Task","useDispatch","removeTask","useCallback","res","removeTaskAC","catch","changeTaskNew","getState","a","find","description","completed","priority","startDate","deadline","item","updateTaskTitleTC","changeStatus","checked","Checkbox","IconButton","ToDoList","useSelector","useEffect","items","resultTask","t","New","onAllKeyHandler","onActiveKeyHandler","onCompletedKeyHandler","addTask","addTaskTC","changeTodotitle","updateTodolistTC","s","test","style","textAlign","i","Todolists","newToDoList","Grid","padding","xs","Paper","elevation","Alert","CustomizedSnackbars","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","addToDoList","todolistTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","container","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICRMC,EAQAC,E,gEAhBNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAIPP,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,cAQAC,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,KAiDZ,IAuCeO,EAvCA,CACXC,aAAc,WACV,OAAOP,EAASQ,IAAyB,cAAcC,MAAK,SAAAC,GACxD,OAAOA,EAASC,SAGxBC,YAAa,SAACC,GACV,OAAOb,EAASc,KAAT,aAAmE,CAACD,WAE/EE,eAAgB,SAACC,GACb,OAAOhB,EAASiB,OAAT,qBAA2DD,KAEtEE,eAAgB,SAACF,EAAoBH,GACjC,OAAOb,EAASmB,IAAT,qBAAwDH,GAAc,CAACH,WAElFO,gBAAiB,SAACJ,EAAoBK,GAClC,OAAOrB,EAASmB,IAAT,sBAAyDH,EAAzD,YAA+E,CAACK,oBAE3FC,SAAU,SAACN,GACP,OAAOhB,EAASQ,IAAT,qBAA6CQ,EAA7C,4BAEXO,WAAY,SAACP,EAAoBH,GAC7B,OAAOb,EAASc,KAAT,qBAAkFE,EAAlF,UAAsG,CAACH,WAElHW,WAAY,SAACR,EAAoBS,GAC7B,OAAOzB,EAASiB,OAAT,sBAA4DD,EAA5D,kBAAgFS,KAE3FC,WAAY,SAACV,EAAoBS,EAAgBE,GAC7C,OAAO3B,EAASmB,IAAT,sBAAkFH,EAAlF,kBAAsGS,GAEzGE,IAGRC,YAAa,SAACZ,EAAoBS,EAAgBJ,GAC9C,OAAOrB,EAASmB,IAAT,sBAAmEH,EAAnE,kBAAuFS,GAAU,CACpGJ,qBCrGNQ,EAA+B,CACjCC,OAAO,OACPC,MAAM,MA0BGC,EAAc,SAACF,GAAD,MAAsB,CAACG,KAAK,wBAAwBH,WAClEI,EAAa,SAACH,GAAD,MAAsB,CAACE,KAAK,uBAAuBF,UAY9DI,EApCE,WAA0E,IAAzEC,EAAwE,uDAAlDP,EAAaQ,EAAqC,uCAElF,OAAOA,EAAOJ,MACV,IAAK,uBACD,kCACOG,GADP,IAEIL,MAAMM,EAAON,QAGrB,IAAK,wBACD,kCACOK,GADP,IAEIN,OAAOO,EAAOP,SAItB,QAAQ,OAAOM,ICbdE,EAAY,SAACC,GACtB,MAAO,CAACN,KAAM,WAAYM,SAEjBC,EAAe,SAACD,GACzB,MAAO,CAACN,KAAM,cAAeM,SAEpBE,EAAuB,SAAChB,EAAciB,EAAkBC,GACjE,MAAO,CAACV,KAAM,kBAAmBR,SAAOiB,aAAWC,aAQ1CC,EAAa,SAACF,EAAoBG,GAC3C,MAAO,CAACZ,KAAM,YAAaS,aAAYG,UAEvCC,EAAiC,GAmF9B,IC1GMC,EACT,SAACpC,EAASK,EAAmBgC,GACzB,GAAwB,IAApBrC,EAAKsC,WAOL,MAFAD,EAAShB,EAAY,UACrBgB,EAASE,EAAkBlC,GAAW,IAC/B,IAAImC,MAAMxC,EAAKyC,SAAS,IAN/BJ,EAASK,EAAiBrC,IAC1BgC,EAAShB,EAAY,cACrBgB,EAASE,EAAkBlC,GAAW,KAUrCsC,EAAqB,SAACC,EAAMP,EAAkBhC,GACvDgC,EAASd,EAAWqB,EAAEC,aACtBR,EAASE,EAAkBlC,GAAW,IACtCgC,EAAShB,EAAY,WCfZqB,EAAmB,SAACrC,GAC7B,MAAO,CAACiB,KAAM,kBAAmBwB,GAAIzC,IAK5B0C,EAAoB,SAACD,EAAY5C,GAC1C,MAAO,CACHoB,KAAM,wBACNwB,KACA5C,UAGK8C,EAAyB,SAACF,EAAYG,GAC/C,MAAO,CACH3B,KAAM,yBACNwB,KACAG,WASKV,EAAoB,SAAClC,EAAmB2B,GAApB,MAC5B,CAACV,KAAM,uCAAuCjB,aAAW2B,aAE1Dd,EAA2C,GAuDxC,I,gBCnFDgC,EAAcC,YAAgB,CAChCjB,MHoBG,WAAmG,IAA9ET,EAA6E,uDAApDU,EAAeT,EAAqC,uCACrG,OAAQA,EAAOJ,MACX,IAAK,cACD,OAAO,2BACAG,GADP,kBAEKC,EAAOK,WAFZ,YAE6BN,EAAMC,EAAOK,YAAYkB,QAAO,SAACrB,GAAD,OAAyBA,EAAKkB,KAAOpB,EAAOZ,aAI7G,IAAK,WACD,OAAO,2BACAW,GADP,kBACeC,EAAOE,KAAKG,WAD3B,CACyCL,EAAOE,MADhD,mBACyDH,EAAMC,EAAOE,KAAKG,gBAK/E,IAAK,cACD,IAAMqB,EAAS,eAAO3B,GAClB4B,EAASD,EAAU1B,EAAOE,KAAKG,YAAYuB,KAAI,SAAAC,GAC/C,OAAIA,EAAGT,KAAOpB,EAAOE,KAAKkB,GACtBS,EAAK7B,EAAOE,KAGT2B,KAEX,OAAO,2BACA9B,GADP,kBAEKC,EAAOE,KAAKG,WAAasB,IAGlC,IAAK,kBACD,IAAMD,EAAS,eAAO3B,GAClB4B,EAASD,EAAU1B,EAAOK,YAAYuB,KAAI,SAAAC,GAC1C,OAAIA,EAAGT,KAAOpB,EAAOZ,QACjByC,EAAGC,eAAiB9B,EAAOM,SACpBuB,GAEJA,KAEX,OAAO,2BACA9B,GADP,kBAEKC,EAAOK,WAAasB,IAK7B,IAAK,eACD,OAAO,2BACA5B,GADP,kBAEKC,EAAO+B,SAASX,GAAK,KAI9B,IAAK,kBACD,OAAO,aACHxC,OAAQmB,EAAMC,EAAOoB,KAClBrB,GAMX,IAAK,iCACD,IAAI2B,EAAS,eAAO3B,GAIpB,OAHAC,EAAOgC,UAAUC,SAAQ,SAAAC,GACrBR,EAAUQ,EAAGd,IAAM,MAEhBM,EAEX,IAAK,YACD,OAAO,2BACA3B,GADP,kBAEKC,EAAOK,WAAaL,EAAOQ,MAAMoB,KAAI,SAAA1B,GAAI,OAAIA,OAItD,QACI,OAAOH,IGhGfiC,UD6BG,WAA4H,IAAnGjC,EAAkG,uDAA9DP,EAAcQ,EAAgD,uCAC9H,OAAQA,EAAOJ,MACX,IAAK,kBACD,OAAOG,EAAMwB,QAAO,SAAAY,GAAE,OAAIA,EAAGf,KAAOpB,EAAOoB,MAC/C,IAAK,eAED,IAAMgB,EAAmBpC,EAAO+B,SAEhC,OADAK,EAAYb,OAAS,MACf,CACFa,GADJ,mBACoBrC,IAExB,IAAK,wBACD,OAAOA,EAAM6B,KAAI,SAACO,GACd,OAAIA,EAAGf,KAAOpB,EAAOoB,GACV,2BAAIe,GAAX,IAAe3D,MAAOwB,EAAOxB,QAE1B2D,KAGf,IAAK,yBACD,OAAOpC,EAAM6B,KAAI,SAAAO,GACb,OAAIA,EAAGf,KAAOpB,EAAOoB,GAEV,2BAAIe,GAAX,IAAeZ,OAAQvB,EAAOuB,SAE3BY,KAGf,IAAK,iCACD,OAAOnC,EAAOgC,UAAUJ,KAAI,SAAAM,GACxB,OAAO,2BACAA,GADP,IAEIX,OAAQ,MACRO,gBAAe,OAK3B,IAAK,uCACD,OAAO/B,EAAM6B,KAAI,SAACM,GACd,OAAGA,EAAGd,KAAKpB,EAAOrB,WACP,2BAAIuD,GAAX,IAAcJ,eAAe9B,EAAOM,WAEhC4B,KAEhB,QACI,OAAOnC,IC1EfsC,IAAIvC,IAGKwC,EAAQC,YAAYf,EAAYgB,YAAgBC,MAM7DpF,OAAOiF,MAAQA,E,qCC+BAI,EAzCKC,IAAMC,MAAK,SAACC,GAA4B,IAAD,EAC7BC,mBAAiB,IADY,mBAChDtE,EADgD,KACzCuE,EADyC,OAE/BD,mBAAqC,MAFN,mBAElDpD,EAFkD,KAE3CsD,EAF2C,KAcjDC,EAAU,WACZ,IAAMC,EAAY1E,EAAM2E,OACpBD,GACAL,EAAMO,SAASF,GACfH,EAAS,KAETC,EAAS,sBAGjB,OAAO,6BACH,6BACI,kBAACK,EAAA,EAAD,CACIC,MAAM,aACN5D,QAASA,EACT6D,UAAW7D,EAAQ,QAAU,GAC7B8D,MAAOhF,EACPiF,SA1BiB,SAACC,GAC1BX,EAASW,EAAMC,cAAcH,OAC1B9D,GACCsD,EAAS,OAwBLY,WApBc,SAACF,GACL,UAAdA,EAAMG,KAAiBZ,KAoBnBa,WAAYpE,IAIhB,kBAACqE,EAAA,EAAD,CAAQzD,SAAUuC,EAAMmB,eAAgBC,MAAO,UAAWC,QAAS,YAAaC,KAAM,QAASC,QAASnB,GAAxG,U,iFCZGoB,EAtBE1B,IAAMC,MAAK,SAACC,GAAsB,IAAD,EACfC,oBAAkB,GADH,mBACvCwB,EADuC,KAC9BC,EAD8B,OAEvBzB,mBAAiBD,EAAMrE,OAFA,mBAEvCgG,EAFuC,KAElCC,EAFkC,KAe9C,OAEIH,EAAS,kBAACjB,EAAA,EAAD,CAAWG,MAAOgB,EAAML,KAAM,QAASV,SANjC,SAACvC,GAChBuD,EAAQvD,EAAEyC,cAAcH,QAK8CkB,WAAS,EAACC,OAVjE,WACfJ,GAAY,GACTC,EAAKrB,QAASN,EAAM+B,gBAAgBJ,EAAKrB,WAS1C,0BAAO0B,cAfM,WACfN,GAAY,IAcwBhB,UAAYV,EAAMpD,SAAS/B,EAAeoH,UAAa,UAAY,IAAKjC,EAAMrE,U,oECsB3GuG,GAvCDpC,IAAMC,MAAK,SAACC,GACtB,IAAMlC,EAAWqE,cAEXC,EAAaC,uBAAa,WN4IR,IAAC7E,EAAoBjB,EM3IzCuB,GN2IqBN,EM3ICwC,EAAMlE,WN2IaS,EM3IFyD,EAAM3C,KAAKkB,GN6ItD,SAACT,GACGA,EAAShB,EAAY,YACrBgB,EAASP,EAAqBhB,EAAOiB,GAAW,IAChDpC,EAAOkB,WAAWkB,EAAYjB,GACzBhB,MAAK,SAAA+G,GACF,GAA4B,IAAxBA,EAAI7G,KAAKsC,WAQT,MAFAD,EAAShB,EAAY,UACrBgB,EAASP,EAAqBhB,EAAOiB,GAAW,IAC1C,IAAIS,MAAMqE,EAAI7G,KAAKyC,SAAS,IAPlCJ,EA9JQ,SAACvB,EAAgBiB,GACzC,MAAO,CAACT,KAAM,cAAeR,SAAQiB,cA6JZ+E,CAAahG,EAAQiB,IAC9BM,EAAShB,EAAY,cACrBgB,EAASP,EAAqBhB,EAAOiB,GAAW,OAQvDgF,OAAM,SAAAnE,GACHP,EAASd,EAAWqB,EAAEC,aACtBR,EAAShB,EAAY,kBM7J/B,CAACgB,EAASkC,EAAM3C,KAAKkB,GAAGyB,EAAMlE,aAC1B2G,EAAgBJ,uBAAY,SAAC1G,GAC/BmC,ENgKyB,SAACN,EAAoBjB,EAAgBZ,GAArC,8CAI7B,WAAOmC,EAAU4E,GAAjB,qBAAAC,EAAA,yDACUhF,EAAQ+E,IAAW/E,QACnBN,EAAOM,EAAMH,GAAYoF,MAAK,SAAA5D,GAAE,OAAIA,EAAGT,KAAOhC,MAFxD,wBAIcE,EAAwB,CAC1Bd,MAAOA,EACPkH,YAAaxF,EAAKwF,YAClBC,UAAWzF,EAAKyF,UAChBlG,OAAQS,EAAKT,OACbmG,SAAU1F,EAAK0F,SACfC,UAAW3F,EAAK2F,UAChBC,SAAU5F,EAAK4F,UAX3B,SAeSnF,EAAShB,EAAY,YAf9B,SAgB4B1B,EAAOoB,WAAWa,EAAKG,WAAYH,EAAKkB,GAAI9B,GAhBxE,UAiBqC,KADxBqC,EAhBb,QAiBmBrD,KAAKsC,WAjBxB,iBAkBaD,EAASR,EAAawB,EAAOrD,KAAKA,KAAKyH,OACvCpF,EAAShB,EAAY,cAnBlC,8BAqBagB,EAAShB,EAAY,UACf,IAAImB,MAAMa,EAAOrD,KAAKyC,SAAS,IAtBlD,0DAyBYJ,EAASd,EAAW,KAAEsB,aACvBR,EAAShB,EAAY,UA1BhC,0DAJ6B,wDMhKhBqG,CAAkBnD,EAAMlE,WAAWkE,EAAM3C,KAAKkB,GAAI5C,MAC7D,CAACmC,EAASkC,EAAM3C,KAAKkB,GAAGyB,EAAMlE,aAC1BsH,EAAef,uBAAY,SAAChE,GNmMlC,IAACb,EAAoBjB,EAAgBK,EMjMjCkB,GNiMHN,EMjM+BwC,EAAMlE,WNiMjBS,EMjM4ByD,EAAM3C,KAAKkB,GNiMvB3B,EM/L7ByB,EAAEyC,cAAcuC,QAAQ,EAAE,EN+LlC,uCAEA,WAAOvF,EAAU4E,GAAjB,qBAAAC,EAAA,yDACUhF,EAAQ+E,IAAW/E,QACnBN,EAAOM,EAAMH,GAAYoF,MAAK,SAAA5D,GAAE,OAAIA,EAAGT,KAAOhC,MAFxD,wBAKcE,EAAwB,CAC1Bd,MAAO0B,EAAK1B,MACZkH,YAAaxF,EAAKwF,YAClBC,UAAWzF,EAAKyF,UAChBlG,OAAQA,EACRmG,SAAU1F,EAAK0F,SACfC,UAAW3F,EAAK2F,UAChBC,SAAU5F,EAAK4F,UAZ3B,SAeQnF,EAAShB,EAAY,YAf7B,SAgB2B1B,EAAOoB,WAAWa,EAAKG,WAAYH,EAAKkB,GAAI9B,GAhBvE,UAiBoC,KADxBqC,EAhBZ,QAiBkBrD,KAAKsC,WAjBvB,iBAkBYD,EAASR,EAAawB,EAAOrD,KAAKA,KAAKyH,OACvCpF,EAAShB,EAAY,cAnBjC,8BAqBYgB,EAAShB,EAAY,UACf,IAAImB,MAAMa,EAAOrD,KAAKyC,SAAS,IAtBjD,0DAyBQJ,EAASd,EAAW,KAAEsB,aACtBR,EAAShB,EAAY,UA1B7B,0DAFA,4DM7LE,CAACgB,EAASkC,EAAM3C,KAAKkB,GAAGyB,EAAMlE,aAChC,OAAO,oCAGC,6BAAK,kBAACwH,GAAA,EAAD,CAAUlC,MAAO,UACPR,SAAUwC,EACVC,QAA6B,IAApBrD,EAAM3C,KAAKT,SAC/B,kBAAC,EAAD,CACIjB,MAAOqE,EAAM3C,KAAK1B,MAClBoG,gBAAiBU,EACjB7F,OAAQoD,EAAM3C,KAAKT,SAGvB,8BAAM,kBAAC2G,EAAA,EAAD,CAAYhC,QAASa,EAAY3E,SAAUuC,EAAM3C,KAAK4B,gBAAgB,kBAAC,KAAD,aCpB/EuE,GAA+B1D,IAAMC,MAAM,YAAiB,IAAfb,EAAc,EAAdA,SAChDvB,EAAQ8F,aAA+C,SAAAvG,GAAK,OAAIA,EAAMS,SACtEG,EAAWqE,cACjBuB,qBAAU,WPqFW,IAAClG,EOpFlBM,GPoFkBN,EOpFC0B,EAASX,GPoFX,uCAErB,WAAOT,GAAP,eAAA6E,EAAA,6DACI7E,EAAShB,EAAY,YADzB,SAEuB1B,EAAOgB,SAASoB,GAFvC,UAEQsB,EAFR,gBAIaA,EAAOrD,KAAKoB,MAJzB,iBAKYiB,EAASJ,EAAWF,EAAYsB,EAAOrD,KAAKkI,QAC5C7F,EAAShB,EAAY,cANjC,8BAQkB,IAAImB,MAAM,cAR5B,0DAYQH,EAAShB,EAAY,UACrBgB,EAASd,EAAW,EAAD,KAb3B,0DAFqB,0DOnFnB,CAACc,EAASoB,EAASX,KACrB,IAAIqF,EAAajG,EAAMuB,EAASX,IAER,WAApBW,EAASR,SAETkF,EAAajG,EAAMuB,EAASX,IAAIG,QAAO,SAACmF,GAAD,OAAqBA,EAAEjH,SAAW/B,EAAeiJ,QAEpE,cAApB5E,EAASR,SACTkF,EAAajG,EAAMuB,EAASX,IAAIG,QAAO,SAAAmF,GAAC,OAAIA,EAAEjH,SAAW/B,EAAeoH,cAG5E,IAAM8B,EAAkB1B,uBAAY,WAChCvE,EAASW,EAAuBS,EAASX,GAAI,UAC/C,CAACT,EAASoB,EAASX,KACfyF,EAAqB3B,uBAAY,WACnCvE,EAASW,EAAuBS,EAASX,GAAI,aAE/C,CAACT,EAASoB,EAASX,KACf0F,EAAwB5B,uBAAY,WACtCvE,EAASW,EAAuBS,EAASX,GAAI,gBAE/C,CAACT,EAASoB,EAASX,KACf2F,EAAU7B,uBAAY,SAAC1G,GACzBmC,EPmFiB,SAACN,EAAoB7B,GAArB,8CAErB,WAAOmC,GAAP,eAAA6E,EAAA,sEAEQ7E,EAAShB,EAAY,YAF7B,SAGyB1B,EAAOiB,WAAWmB,EAAY7B,GAHvD,UAIqC,KADzB0B,EAHZ,QAIiB5B,KAAKsC,WAJtB,iBAKYD,EAASV,EAAUC,EAAK5B,KAAKA,KAAKyH,OAClCpF,EAAShB,EAAY,cANjC,8BAQYgB,EAAShB,EAAY,UACf,IAAImB,MAAMZ,EAAK5B,KAAKyC,SAAS,IAT/C,0DAaQJ,EAASd,EAAW,KAAEsB,aACtBR,EAAShB,EAAY,UAd7B,0DAFqB,sDOnFRqH,CAAUjF,EAASX,GAAG5C,MACjC,CAACmC,EAASoB,EAASX,KACf6F,EAAkB/B,uBAAY,SAAC1G,GACjCmC,ELkFwB,SAAChC,EAAoBH,GAArB,8CAE5B,WAAOmC,GAAP,eAAA6E,EAAA,sEAEQ7E,EAAShB,EAAY,YAF7B,SAG2B1B,EAAOY,eAAeF,EAAYH,GAH7D,UAIkC,KADtBmD,EAHZ,QAIgBrD,KAAKsC,WAJrB,iBAKUD,EAAShB,EAAY,cACrBgB,EAASU,EAAkB1C,EAAYH,IANjD,8BAQUmC,EAAShB,EAAY,UACf,IAAImB,MAAMa,EAAOrD,KAAKyC,SAAS,IAT/C,0DAYQJ,EAAShB,EAAY,UACrBgB,EAASd,EAAW,KAAEsB,aAb9B,0DAF4B,sDKlFf+F,CAAiBnF,EAASX,GAAI5C,MACzC,CAACmC,EAASoB,EAASX,KACrB,OAAQ,6BACJ,6BAEI,yBAAKmC,UAAW4D,KAAEvI,QAAS,kBAACwH,EAAA,EAAD,CACvB9F,SAAUyB,EAASD,eACnBsC,QAAS,kBAAMzD,GL6DEhC,EK7DwBoD,EAASX,GL6DlC,uCAE5B,WAAOT,GAAP,eAAA6E,EAAA,sEAEQ7E,EAAShB,EAAY,YACrBgB,EAASE,EAAkBlC,GAAW,IAH9C,SAI2BV,EAAOS,eAAeC,GAJjD,OAIYgD,EAJZ,OAKQjB,EAAiBiB,EAAOrD,KAAKK,EAAWgC,GALhD,gDAOQM,EAAqB,EAAD,GAAGN,EAAShC,GAPxC,yDAF4B,4DAACA,IK7DuC,kBAAC,KAAD,QAE5D,wBAAI4E,UAAW4D,KAAEC,KAAMC,MAAO,CAACC,UAAW,WACtC,kBAAC,EAAD,CACI9I,MAAOuD,EAASvD,MAChBoG,gBAAiBqC,KAKzB,kBAAC,EAAD,CAAa7D,SAAU2D,EAAS/C,eAAgBjC,EAASD,iBAExD2E,EAAW7E,KAAI,SAAC2F,GACf,OAAQ,kBAAC,GAAD,CAAM5I,WAAYoD,EAASX,GAAIlB,KAAMqH,EAC9B1D,IAAK0D,EAAEnG,QAIxB,6BACI,kBAAC2C,EAAA,EAAD,CAAQI,KAAM,QAASF,MAAO,UAAWC,QAA6B,QAApBnC,EAASR,OAAmB,WAAa,OACnF6C,QAASwC,GADjB,OAGA,kBAAC7C,EAAA,EAAD,CAAQE,MAAO,UAAWE,KAAM,QAASD,QAA6B,WAApBnC,EAASR,OAAsB,WAAa,OACtF6C,QAASyC,GADjB,UAGA,kBAAC9C,EAAA,EAAD,CAAQE,MAAO,YAAaE,KAAM,QAASD,QAA6B,cAApBnC,EAASR,OAAyB,WAAa,OAC3F6C,QAAS0C,GADjB,mBChEOU,GAdL,WACd,IAAMxF,EAAYsE,aAA0D,SAAAvG,GAAK,OAAIA,EAAMiC,aAE3F,OAAO,oCACFA,EAAUJ,KAAI,SAAC6F,GACZ,OAAO,kBAACC,EAAA,EAAD,CAAML,MAAO,CAACM,QAAS,QAAS9D,IAAK4D,EAAYrG,GAAI2E,MAAI,EAAC6B,GAAI,GACjE,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGT,MAAO,CAACM,QAAS,SAClC,kBAACtB,GAAD,CAAUtE,SAAU0F,W,oBCPxC,SAASM,GAAMlF,GACX,OAAO,kBAAC,KAAD,eAAUiF,UAAW,EAAG5D,QAAQ,UAAarB,IAIzC,SAASmF,KAErB,IAAMtI,EAAQ4G,aAA0C,SAAAvG,GAAK,OAAIA,EAAMsC,IAAI3C,SACpEiB,EAAWqE,cACXiD,EAAc,SAACvE,EAA8BwE,GAChC,cAAXA,GAIJvH,EAASd,EAAW,QAIxB,OACQ,kBAACsI,GAAA,EAAD,CAAUC,KAAc,OAAR1I,EAAc2I,iBAAkB,IAAMC,QAASL,GAC3D,kBAAC,GAAD,CAAOK,QAASL,EAAaM,SAAS,SACjC7I,ICbrB,IAsCe8I,GAtCM7F,IAAMC,MAAK,WAC5B,IAAMjC,EAAWqE,cACXvF,EAAS6G,aAAyC,SAAAvG,GAAK,OAAIA,EAAMsC,IAAI5C,UACrEgJ,EAAcvD,uBAAY,SAACwD,GRiFR,IAAClK,EQhFtBmC,GRgFsBnC,EQhFCkK,ERgFF,uCAEzB,WAAO/H,GAAP,eAAA6E,EAAA,sEAEQ7E,EAAShB,EAAY,YAF7B,SAG2B1B,EAAOM,YAAYC,GAH9C,UAIuC,KAD3BmD,EAHZ,QAImBrD,KAAKsC,WAJxB,iBAKYD,EA/FL,CAACf,KAAM,eAAgBmC,SA+FKJ,EAAOrD,KAAKA,KAAKyH,OACxCpF,EAAShB,EAAY,cANjC,8BASYgB,EAAShB,EAAY,UACf,IAAImB,MAAMa,EAAOrD,KAAKyC,SAAS,IAVjD,0DAeQJ,EAAShB,EAAY,UACrBgB,EAASd,EAAW,KAAEsB,aAhB9B,0DAFyB,0DQ/EtB,CAACR,IAKJ,OAHA4F,qBAAU,WACN5F,ERoEsB,uCAC1B,WAAOA,GAAP,eAAA6E,EAAA,6DACI7E,EAAShB,EAAY,YADzB,SAEuB1B,EAAOC,eAF9B,OAEQyD,EAFR,OAGIhB,EAnEG,CACHf,KAAM,iCACNoC,UAiEqBL,IACrBhB,EAAShB,EAAY,cAJzB,2CAD0B,yDQnEvB,CAACgB,IAEA,6BACI,kBAACgI,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACzC,EAAA,EAAD,CAAY0C,KAAK,QAAQ7E,MAAM,UAAU8E,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY/E,QAAQ,MAApB,QAGA,kBAACH,EAAA,EAAD,CAAQE,MAAM,WAAd,WAGE,YAATxE,EAAmB,kBAACyJ,EAAA,EAAD,MAAmB,GACvC,kBAACC,EAAA,EAAD,KACI,kBAACzB,EAAA,EAAD,CAAM0B,WAAS,GAAf,IAAiB,kBAAC,EAAD,CAAahG,SAAUqF,KACxC,kBAACf,EAAA,EAAD,CAAM0B,WAAS,GACX,kBAAC,GAAD,OAEJ,kBAACpB,GAAD,WCnChBqB,IAASC,OAAU,kBAAC,IAAD,CAAUhH,MAAOA,GAAO,kBAAC,GAAD,OAA6BiH,SAASC,eAAe,SdkI1F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvL,MAAK,SAAAwL,GACJA,EAAaC,gBAEdxE,OAAM,SAAA3F,GACLoK,QAAQpK,MAAMA,EAAMqK,a,mBehJ5BC,EAAOC,QAAU,CAAC,OAAS,yBAAyB,KAAO,yB","file":"static/js/main.00c603e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c9a11d0b-1bf4-4a0d-8b85-3f35229d5cc6'\r\n    }\r\n})\r\n\r\nexport enum PriorityType {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum TypeStatusTask {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport type TypeTodolist = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TypeData = {\r\n    item: TypeTodolist\r\n}\r\nexport type TypeResponseDeleteAndUpdate<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TypeTaskItems = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}&{disabledStatus:boolean}\r\nexport type TypeResponseTask = {\r\n    items: Array<TypeTaskItems>\r\n    totalCount: number\r\n    error: boolean\r\n}\r\nexport type PropertiesType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TypeStatusTask\r\n    priority: PriorityType\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nconst GetApi = {\r\n    getTodoLists: () => {\r\n        return instance.get<Array<TypeTodolist>>('todo-lists').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    setTodolist: (title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<TypeData>>(`todo-lists`, {title})\r\n    },\r\n    removeTodolist: (todolistId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist: (todolistId: string, title: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    reorderTodolist: (todolistId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/reorder`, {putAfterItemId})\r\n    },\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<TypeResponseTask>(`todo-lists/${todolistId}/tasks?count=10&page=1`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<TypeResponseDeleteAndUpdate>(`/todo-lists/${todolistId}/tasks/${taskId}`,)\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: PropertiesType) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<{ item: TypeTaskItems }>>(`/todo-lists/${todolistId}/tasks/${taskId}`,\r\n\r\n            model\r\n        )\r\n    },\r\n    reorderTask: (todolistId: string, taskId: string, putAfterItemId: string) => {\r\n        return instance.put<TypeResponseDeleteAndUpdate<TypeData>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {\r\n            putAfterItemId,\r\n        })\r\n    }\r\n}\r\nexport default GetApi;","\r\nconst initialState:TypeInitialSate = {\r\n    status:\"free\",\r\n    error:null\r\n}\r\n\r\nconst AppReducer=(state:TypeInitialSate=initialState,action:TypeActions):TypeInitialSate=>{\r\n\r\n        switch(action.type){\r\n            case \"appReducer/SET_ERROR\":{\r\n                return{\r\n                    ...state,\r\n                    error:action.error\r\n                }\r\n            }\r\n            case \"appReducer/SET_STATUS\":{\r\n                return{\r\n                    ...state,\r\n                    status:action.status\r\n                }\r\n            }\r\n\r\n            default:return state\r\n\r\n        }\r\n\r\n}\r\n\r\n\r\nexport const setStatusAC = (status:TypeStatus)=>({type:'appReducer/SET_STATUS',status} as const)\r\nexport const setErrorAC = (error:string|null)=>({type:'appReducer/SET_ERROR',error} as const)\r\n\r\nexport type TypeSetStatusAction = ReturnType<typeof setStatusAC>\r\nexport type TypeSetErrorAction = ReturnType<typeof setErrorAC>\r\ntype TypeActions =\r\n    |TypeSetErrorAction\r\n    |TypeSetStatusAction;\r\ntype TypeInitialSate = {\r\n    status:TypeStatus\r\n    error:string|null\r\n}\r\nexport type TypeStatus = 'free'|'loading'|'error'|'succeeded';\r\nexport default AppReducer;\r\n\r\n\r\n","import {TypeAddTodolistAction, TypeRemoveTodolistAction, TypeSetTodolistAction} from \"./todolistReducer\";\r\nimport GetApi, {PropertiesType, TypeStatusTask, TypeTaskItems, TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setErrorAC, setStatusAC, TypeSetErrorAction, TypeSetStatusAction} from \"../app/appReducer\";\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId} as const\r\n}\r\nexport const addTaskAC = (task: TypeTaskItems) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const changeTaskAC = (task: TypeTaskItems) => {\r\n    return {type: 'CHANGE_TASK', task} as const\r\n}\r\nexport const changeTaskDisabledAC = (taskId:string,todoListId:string,disabled: boolean) => {\r\n    return {type: 'CHANGE_DISABLED', taskId,todoListId,disabled} as const\r\n}\r\nexport const AddTodilistAC = (todolist: TypeTodolist) => {\r\n    return {type: 'ADD-TODOLIST', todolist,} as const\r\n}\r\nexport const RemoveTodolistAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\nexport const getTasksAC = (todoListId: string, tasks: Array<TypeTaskItems>) => {\r\n    return {type: 'GET-TASKS', todoListId, tasks} as const\r\n}\r\nlet initilalState: TypeTaskReducer = {}\r\n\r\nexport function taskReducer(state: TypeTaskReducer = initilalState, action: ActionType): TypeTaskReducer {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [...state[action.todoListId].filter((task: TypeTaskItems) => task.id !== action.taskId)]\r\n            }\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        }\r\n\r\n        case \"CHANGE_TASK\": {\r\n            const copyState = {...state}\r\n            let result = copyState[action.task.todoListId].map(ts => {\r\n                if (ts.id === action.task.id) {\r\n                    ts = action.task\r\n                    return ts\r\n                }\r\n                return ts\r\n            })\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: result\r\n            }\r\n        }\r\n        case \"CHANGE_DISABLED\":{\r\n            const copyState = {...state}\r\n            let result = copyState[action.todoListId].map(ts => {\r\n                if (ts.id === action.taskId) {\r\n                    ts.disabledStatus = action.disabled\r\n                    return ts\r\n                }\r\n                return ts\r\n            })\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: result\r\n            }\r\n        }\r\n\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return {\r\n                delete: state[action.id],\r\n                ...state\r\n\r\n            }\r\n        }\r\n\r\n\r\n        case \"todolist_reducer/SET_TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(td => {\r\n                copyState[td.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"GET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(task => task)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTaskTC = (todoListId: string): ThunkAction<void, AppRootStateType, unknown,\r\n    ActionType | TypeSetStatusAction | TypeSetErrorAction> =>\r\n    async (dispatch) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        let result = await GetApi.getTasks(todoListId)\r\n        try {\r\n            if (!result.data.error) {\r\n                dispatch(getTasksAC(todoListId, result.data.items))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n                throw new Error(\"Some Error\")\r\n            }\r\n\r\n        } catch (e) {\r\n            dispatch(setStatusAC(\"error\"))\r\n            dispatch(setErrorAC(e))\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string): ThunkAction<void,\r\n    AppRootStateType, unknown, ActionType | TypeSetErrorAction | TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC(\"loading\"))\r\n            let task = await GetApi.createTask(todoListId, title)\r\n            if (task.data.resultCode === 0) {\r\n                dispatch(addTaskAC(task.data.data.item))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n                dispatch(setStatusAC(\"error\"))\r\n                throw new Error(task.data.messages[0])\r\n\r\n            }\r\n        } catch (e) {\r\n            dispatch(setErrorAC(e.toString()))\r\n            dispatch(setStatusAC(\"error\"))\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string): ThunkAction<void, AppRootStateType,\r\n    unknown, ActionType | TypeSetErrorAction | TypeSetStatusAction> =>\r\n    (dispatch) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        dispatch(changeTaskDisabledAC(taskId,todoListId,true))\r\n        GetApi.deleteTask(todoListId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todoListId))\r\n                    dispatch(setStatusAC(\"succeeded\"))\r\n                    dispatch(changeTaskDisabledAC(taskId,todoListId,false))\r\n\r\n                } else {\r\n                    dispatch(setStatusAC(\"error\"))\r\n                    dispatch(changeTaskDisabledAC(taskId,todoListId,false))\r\n                    throw new Error(res.data.messages[0])\r\n                }\r\n            })\r\n            .catch(e => {\r\n                dispatch(setErrorAC(e.toString()))\r\n                dispatch(setStatusAC(\"error\"))\r\n\r\n            })\r\n    }\r\n\r\nexport const updateTaskTitleTC = (todoListId: string, taskId: string, title: string):\r\n    ThunkAction<void,\r\n        AppRootStateType, unknown, ActionType|TypeSetStatusAction|TypeSetErrorAction> =>\r\n\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n\r\n            }\r\n         try{\r\n             dispatch(setStatusAC(\"loading\"))\r\n             let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n             if(result.data.resultCode===0){\r\n                 dispatch(changeTaskAC(result.data.data.item))\r\n                 dispatch(setStatusAC(\"succeeded\"))\r\n             }else{\r\n                 dispatch(setStatusAC(\"error\"))\r\n                 throw new Error(result.data.messages[0])\r\n             }\r\n         }catch (e) {\r\n                dispatch(setErrorAC(e.toString()))\r\n               dispatch(setStatusAC(\"error\"))\r\n\r\n         }\r\n        }\r\n\r\n    }\r\nexport const updateTaskStatusTC =\r\n    (todoListId: string, taskId: string, status: TypeStatusTask):\r\n        ThunkAction<void, AppRootStateType, unknown, ActionType|TypeSetStatusAction|TypeSetErrorAction> =>\r\n    async (dispatch, getState) => {\r\n        const tasks = getState().tasks\r\n        const task = tasks[todoListId].find(ts => ts.id === taskId)\r\n\r\n        if (task) {\r\n            const model: PropertiesType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                completed: task.completed,\r\n                status: status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n            }\r\n        try{\r\n            dispatch(setStatusAC(\"loading\"))\r\n            let result = await GetApi.updateTask(task.todoListId, task.id, model)\r\n            if(result.data.resultCode===0){\r\n                dispatch(changeTaskAC(result.data.data.item))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            }else{\r\n                dispatch(setStatusAC(\"error\"))\r\n                throw new Error(result.data.messages[0])\r\n            }\r\n        }catch (e) {\r\n            dispatch(setErrorAC(e.toString()))\r\n            dispatch(setStatusAC(\"error\"))\r\n\r\n        }\r\n\r\n    } }\r\n\r\nexport type TypeTaskReducer = {\r\n    [key: string]: TypeTaskItems[]\r\n}\r\nexport type TypeTaskDisabledButton = ReturnType<typeof changeTaskDisabledAC>\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskAC>\r\n    | TypeAddTodolistAction\r\n    | TypeRemoveTodolistAction\r\n    | TypeSetTodolistAction\r\n    | ReturnType<typeof getTasksAC>\r\n    |TypeTaskDisabledButton\r\n\r\n","import {setErrorAC, setStatusAC} from \"../app/appReducer\";\r\nimport {RemoveTodolistAC, setStatsuDesabled} from \"../state/todolistReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const functionErrorApi =\r\n    (data:any,todolistId:string, dispatch:Dispatch)=>{\r\n        if (data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC(todolistId))\r\n            dispatch(setStatusAC('succeeded'))\r\n            dispatch(setStatsuDesabled(todolistId,false))\r\n        } else {\r\n            dispatch(setStatusAC('error'))\r\n            dispatch(setStatsuDesabled(todolistId,false))\r\n            throw  new Error(data.messages[0])\r\n\r\n        }\r\n\r\n}\r\n\r\nexport const functionErrorNetwork=(e:any,dispatch:Dispatch,todolistId:string)=>{\r\n    dispatch(setErrorAC(e.toString()))\r\n    dispatch(setStatsuDesabled(todolistId,false))\r\n    dispatch(setStatusAC('error'))\r\n\r\n\r\n}","import {TypeFilter} from \"../app/AppWithRedux\";\r\nimport GetApi, {TypeTodolist} from \"../dall/todolists-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setErrorAC, setStatusAC, TypeSetErrorAction, TypeSetStatusAction} from \"../app/appReducer\";\r\nimport {functionErrorApi, functionErrorNetwork} from \"../components/functionErrorApi\";\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): TypeRemoveTodolistAction => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodilistAC = (todolist: TypeTodolist): TypeAddTodolistAction => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const ChangeToddolistAC = (id: string, title: string): TypeChangeTodoolistAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_TITLE\",\r\n        id,\r\n        title\r\n    }\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: TypeFilter): TypeChangeTodoolistFilterAction => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_FILTER\",\r\n        id,\r\n        filter\r\n    }\r\n}\r\nexport const setTodolist = (todolists: Array<TypeTodolist>) => {\r\n    return {\r\n        type: 'todolist_reducer/SET_TODOLISTS',\r\n        todolists\r\n    } as const\r\n}\r\nexport const setStatsuDesabled = (todolistId: string,disabled:boolean)=>\r\n    ({type: \"/todolistReducer/SET_DISABLED_STATUS\",todolistId,disabled} as const)\r\n\r\nlet initialState: Array<TypeTodolistReducer> = []\r\n\r\n\r\nexport function TodolistReducer(state: Array<TypeTodolistReducer> = initialState, action: ActionType): Array<TypeTodolistReducer> {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n\r\n            const newTodolist: any = action.todolist\r\n            newTodolist.filter = 'all'\r\n            return [\r\n                newTodolist, ...state\r\n            ]\r\n        case \"CHANGE_TODOLIST_TITLE\":\r\n            return state.map((tl) => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, title: action.title}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"CHANGE_TODOLIST_FILTER\":\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n\r\n                    return {...tl, filter: action.filter}\r\n                }\r\n                return tl\r\n\r\n            })\r\n        case \"todolist_reducer/SET_TODOLISTS\": {\r\n            return action.todolists.map(td => {\r\n                return {\r\n                    ...td,\r\n                    filter: \"all\",\r\n                    disabledStatus:false\r\n                }\r\n            })\r\n\r\n        }\r\n        case \"/todolistReducer/SET_DISABLED_STATUS\":\r\n            return state.map((td)=>{\r\n                if(td.id===action.todolistId){\r\n                    return {...td,disabledStatus:action.disabled}\r\n                }\r\n                return  td\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const getTodolistsTC = (): ThunkAction<void, AppRootStateType, unknown, ActionType | TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        let result = await GetApi.getTodoLists()\r\n        dispatch(setTodolist(result))\r\n        dispatch(setStatusAC(\"succeeded\"))\r\n\r\n    }\r\nexport const addTodolistTC = (title: string): ThunkAction<void, AppRootStateType, unknown,\r\n    ActionType | TypeSetErrorAction|TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC(\"loading\"))\r\n            let result = await GetApi.setTodolist(title)\r\n            if (result.data.resultCode === 0) {\r\n                dispatch(AddTodilistAC(result.data.data.item))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n\r\n            } else {\r\n                dispatch(setStatusAC(\"error\"))\r\n                throw new Error(result.data.messages[0])\r\n\r\n\r\n            }\r\n        } catch (e) {\r\n            dispatch(setStatusAC(\"error\"))\r\n            dispatch(setErrorAC(e.toString()))\r\n        }\r\n\r\n    }\r\nexport const removeTodolistTC = (todolistId: string): ThunkAction<void, AppRootStateType,\r\n    unknown, ActionType | TypeSetErrorAction | TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC('loading'))\r\n            dispatch(setStatsuDesabled(todolistId,true))\r\n            let result = await GetApi.removeTodolist(todolistId)\r\n            functionErrorApi(result.data,todolistId,dispatch)\r\n        } catch (e) {\r\n            functionErrorNetwork(e,dispatch,todolistId)\r\n\r\n        }\r\n\r\n    }\r\nexport const updateTodolistTC = (todolistId: string, title: string): ThunkAction<void,\r\n    AppRootStateType, unknown, ActionType|TypeSetErrorAction|TypeSetStatusAction> =>\r\n    async (dispatch) => {\r\n        try{\r\n            dispatch(setStatusAC('loading'))\r\n            let result = await GetApi.updateTodolist(todolistId, title)\r\n          if(result.data.resultCode===0){\r\n              dispatch(setStatusAC(\"succeeded\"))\r\n              dispatch(ChangeToddolistAC(todolistId, title))\r\n          }else{\r\n              dispatch(setStatusAC(\"error\"))\r\n              throw new Error(result.data.messages[0])\r\n          }\r\n        }catch (e) {\r\n            dispatch(setStatusAC(\"error\"))\r\n            dispatch(setErrorAC(e.toString()))\r\n\r\n        }\r\n    }\r\n\r\nexport type TypeSetTodolistAction = ReturnType<typeof setTodolist>\r\nexport type TypeRemoveTodolistAction = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type TypeAddTodolistAction = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: TypeTodolist\r\n}\r\ntype TypeChangeTodoolistAction = {\r\n    type: \"CHANGE_TODOLIST_TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\ntype TypeChangeTodoolistFilterAction = {\r\n    type: \"CHANGE_TODOLIST_FILTER\"\r\n    id: string\r\n    filter: TypeFilter\r\n}\r\nexport type TypeTodolistReducer = TypeTodolist & { filter: TypeFilter,disabledStatus:boolean }\r\nexport type TypeSetDisabledStatusAC = ReturnType<typeof setStatsuDesabled>\r\nexport type ActionType =\r\n    TypeRemoveTodolistAction\r\n    | TypeAddTodolistAction\r\n    | TypeChangeTodoolistAction\r\n    | TypeChangeTodoolistFilterAction\r\n    | TypeSetTodolistAction\r\n    |TypeSetDisabledStatusAC","import {taskReducer} from './taskReducer';\r\nimport {TodolistReducer} from './todolistReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport AppReducer from \"../app/appReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: TodolistReducer,\r\n    app:AppReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type TypeAddItemProps = {\r\n    addItems: (title: string) => void\r\n    disabledButton?: boolean\r\n}\r\n\r\nconst AddItemForm = React.memo((props: TypeAddItemProps) =>{\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<\"Title is Required\" | null>(null)\r\n\r\n    const onChangeHandlerInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        if(error){\r\n            setError(null)\r\n\r\n        }\r\n    }\r\n    const onKeyHandlerInput = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            props.addItems(itemTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <TextField\r\n                label=\"Enter text\"\r\n                error={!!error}\r\n                className={error ? 'error' : \"\"}\r\n                value={title}\r\n                onChange={onChangeHandlerInput}\r\n                onKeyPress={onKeyHandlerInput}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button disabled={props.disabledButton} color={\"primary\"} variant={\"contained\"} size={\"small\"} onClick={addItem}>+</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TypeStatusTask} from \"../dall/todolists-api\";\r\n\r\nexport type TypeEditSpan={\r\n    title:string\r\n    changeTaskTitle: ( title: string) => void\r\n    status?:TypeStatusTask\r\n\r\n\r\n}\r\n\r\nconst EditSpan = React.memo((props:TypeEditSpan)=>{\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [text,setText] = useState<string>(props.title)\r\n    const onEditMode = ()=>{\r\n        setEditMode(true)\r\n\r\n    }\r\n    const ofEditMode = ()=>{\r\n        setEditMode(false)\r\n        if(text.trim()){ props.changeTaskTitle(text.trim())}\r\n    }\r\n    const changeText = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setText(e.currentTarget.value)\r\n\r\n    }\r\n    return(\r\n\r\n        editMode?<TextField value={text} size={\"small\"} onChange={changeText} autoFocus onBlur={ofEditMode}/>\r\n        : <span  onDoubleClick={onEditMode} className={(props.status===TypeStatusTask.Completed) ? 'is-done' : \"\"}>{props.title}</span>\r\n\r\n    )\r\n})\r\nexport default EditSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport { removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../state/taskReducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TypeTaskItems} from \"../dall/todolists-api\";\r\n\r\nexport type TypePropsTask = {\r\n    task:TypeTaskItems\r\n    todolistId: string\r\n\r\n}\r\nconst Task =  React.memo((props:TypePropsTask)=>{\r\n    const dispatch = useDispatch()\r\n    debugger\r\n    const removeTask = useCallback( () => {\r\n        dispatch(removeTaskTC(props.todolistId,props.task.id))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeTaskNew = useCallback((title: string) => {\r\n        dispatch(updateTaskTitleTC(props.todolistId,props.task.id, title))\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        dispatch(updateTaskStatusTC(props.todolistId,props.task.id,\r\n\r\n            e.currentTarget.checked?2:0, ))\r\n\r\n    },[dispatch,props.task.id,props.todolistId])\r\n    return <>\r\n\r\n\r\n            <div><Checkbox color={\"primary\"}\r\n                           onChange={changeStatus}\r\n                           checked={props.task.status===0?false:true}/>\r\n                <EditSpan\r\n                    title={props.task.title}\r\n                    changeTaskTitle={changeTaskNew}\r\n                    status={props.task.status}\r\n                />\r\n\r\n                <span><IconButton onClick={removeTask} disabled={props.task.disabledStatus}><HighlightOffIcon/>\r\n                        </IconButton></span>\r\n            </div>\r\n\r\n\r\n\r\n\r\n    </>\r\n\r\n})\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport EditSpan from \"../components/editSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport s from './todolist.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    removeTodolistTC,\r\n    TypeTodolistReducer,\r\n    updateTodolistTC\r\n} from \"../state/todolistReducer\";\r\nimport {addTaskTC, getTaskTC, TypeTaskReducer} from \"../state/taskReducer\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport Task from \"../Tasks/tasks\";\r\nimport {TypeStatusTask, TypeTaskItems} from \"../dall/todolists-api\";\r\n\r\ntype PropsType = {\r\n    todolist:TypeTodolistReducer\r\n}\r\n\r\nexport const ToDoList:React.FC<PropsType> = React.memo( ({todolist}) => {\r\n    const tasks = useSelector<AppRootStateType, TypeTaskReducer>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(todolist.id))\r\n    },[dispatch,todolist.id])\r\n    let resultTask = tasks[todolist.id];\r\n\r\n    if (todolist.filter === \"active\") {\r\n\r\n        resultTask = tasks[todolist.id].filter((t:TypeTaskItems) => t.status === TypeStatusTask.New)\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        resultTask = tasks[todolist.id].filter(t => t.status === TypeStatusTask.Completed)\r\n    }\r\n\r\n    const onAllKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(todolist.id, 'all'))\r\n    },[dispatch,todolist.id])\r\n    const onActiveKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(todolist.id, 'active'))\r\n\r\n    },[dispatch,todolist.id])\r\n    const onCompletedKeyHandler = useCallback(() => {\r\n        dispatch(changeTodolistFilterAC(todolist.id, 'completed'))\r\n\r\n    },[dispatch,todolist.id])\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(todolist.id,title))\r\n    },[dispatch,todolist.id])\r\n    const changeTodotitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTC(todolist.id, title))\r\n    },[dispatch,todolist.id])\r\n    return (<div>\r\n        <div>\r\n\r\n            <div className={s.delete} ><IconButton\r\n                disabled={todolist.disabledStatus}\r\n                onClick={() => dispatch(removeTodolistTC(todolist.id))}><DeleteForeverIcon/></IconButton></div>\r\n\r\n            <h3 className={s.test} style={{textAlign: 'center'}}>\r\n                <EditSpan\r\n                    title={todolist.title}\r\n                    changeTaskTitle={changeTodotitle}\r\n                />\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItems={addTask} disabledButton={todolist.disabledStatus}/>\r\n\r\n            {resultTask.map((i: TypeTaskItems) => {\r\n              return  <Task todolistId={todolist.id} task={i}\r\n                             key={i.id}  />\r\n            })}\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"} color={\"default\"} variant={todolist.filter === 'all' ? 'outlined' : \"text\"}\r\n                        onClick={onAllKeyHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} size={\"small\"} variant={todolist.filter === 'active' ? 'outlined' : \"text\"}\r\n                        onClick={onActiveKeyHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} size={\"small\"} variant={todolist.filter === 'completed' ? 'outlined' : \"text\"}\r\n                        onClick={onCompletedKeyHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n})","import React from 'react';\r\nimport {TypeTodolistReducer} from \"../state/todolistReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {ToDoList} from \"../ToDoList/ToDoList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nconst Todolists = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TypeTodolistReducer>>(state => state.todolists)\r\n\r\n    return <>\r\n        {todolists.map((newToDoList: TypeTodolistReducer) => {\r\n            return <Grid style={{padding: '10px'}} key={newToDoList.id} item xs={3}>\r\n                <Paper elevation={5} style={{padding: '10px'}}>\r\n                    <ToDoList todolist={newToDoList} />\r\n\r\n\r\n                </Paper>\r\n            </Grid>\r\n        })}\r\n        </>}\r\n        export default Todolists","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setErrorAC} from '../app/appReducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport default function CustomizedSnackbars() {\r\n\r\n   const error = useSelector<AppRootStateType,string|null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={error!==null} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport AddItemForm from \"../components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTodolistTC, getTodolistsTC} from \"../state/todolistReducer\";\r\nimport Todolists from \"../todolists/todolists\";\r\nimport CustomizedSnackbars from \"../components/SnackBarError\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {TypeStatus} from \"./appReducer\";\r\n\r\nexport type TypeFilter = 'all' | 'active' | 'completed';\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType,TypeStatus>(state => state.app.status)\r\n    const addToDoList = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status===\"loading\"?<LinearProgress />:\"\"}\r\n            <Container>\r\n                <Grid container> <AddItemForm addItems={addToDoList}/></Grid>\r\n                <Grid container>\r\n                    <Todolists/>\r\n                </Grid>\r\n                <CustomizedSnackbars/>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\n\r\n\r\nReactDOM.render(   <Provider store={store}><AppWithRedux/></Provider>,  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"todolist_delete__3KUky\",\"test\":\"todolist_test__2Xzk0\"};"],"sourceRoot":""}